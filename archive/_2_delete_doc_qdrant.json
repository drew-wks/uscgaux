{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tools for auditing the Qdrant DB, finding and deleting documents\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### This is the **R** and **D** in the **CRUD** acronym. This notebook assumes Langchain `Document` object. See database_schema.md for more details. Qdrant documentation is located [here.](https://qdrant.github.io/qdrant/redoc/index.html#tag/points/operation/scroll_points). Adding to this becuase it's hard to find online searching\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%pip install --upgrade qdrant-client\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/drew_wilkins/Drews_Files/Drew/Python/Localcode/.venv-311/bin/python\n"
     ]
    }
   ],
   "source": [
    "import os, sys\n",
    "import pandas as pd\n",
    "from dotenv import load_dotenv\n",
    "\n",
    "# Confirm correct interpreter is used\n",
    "print(sys.executable)\n",
    "\n",
    "# Add parent directory to sys.path to import modules from a subdirectory\n",
    "sys.path.append(os.path.abspath('..'))\n",
    "\n",
    "\n",
    "import library_utils as lib"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 0. Imports and configs\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "\n",
    "\n",
    "# Config Qdrant\n",
    "QDRANT_URL = os.getenv(\"QDRANT_URL\")\n",
    "QDRANT_API_KEY = os.getenv(\"QDRANT_API_KEY\")\n",
    "# QDRANT_URL = st.secrets[\"QDRANT_URL\"]\n",
    "# QDRANT_API_KEY = st.secrets[\"QDRANT_API_KEY\"]\n",
    "QDRANT_PATH = \"/Users/drew_wilkins/Drews_Files/Drew/Python/Localcode/Drews_Tools/qdrant_ASK_lib_tools/qdrant_db\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Connect to Qdrant\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "qdrant location: cloud\n",
      "\n",
      "collections:\n",
      "ASK_vectorstore\n",
      "ask_pdf_docs\n",
      "ASK_vectorstore-backup21APR2025\n",
      "ask_pdf_pages\n"
     ]
    }
   ],
   "source": [
    "from qdrant_client import QdrantClient\n",
    "from qdrant_client.http import exceptions as qdrant_exceptions\n",
    "\n",
    "\n",
    "# Init client\n",
    "# 22.5 sec for cloud\n",
    "# Local client places a lock file in the qdrant directory\n",
    "client = QdrantClient(\n",
    "    url=QDRANT_URL,  # for cloud\n",
    "    api_key=QDRANT_API_KEY,  # for cloud\n",
    "    prefer_grpc=True,\n",
    "    # path=QDRANT_PATH\n",
    ")\n",
    "\n",
    "lib.which_qdrant(client)\n",
    "lib.list_collections(client)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of points in ASK_vectorstore on <qdrant_client.qdrant_remote.QdrantRemote object at 0x16beffe90>: 11615\n"
     ]
    }
   ],
   "source": [
    "# Read output to make sure you are accesing the right db in the right location\n",
    "\n",
    "qdrant_collection_name = \"ASK_vectorstore\"\n",
    "\n",
    "print(\n",
    "    f\"Number of points in {qdrant_collection_name} on {client._client}: {client.get_collection(qdrant_collection_name).points_count}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Define a range index so you can sort on it\n",
    "NOTE: expressions that use this index will not return records that are missing a page key"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:root:Payload indexes have no effect in the local Qdrant. Please use server Qdrant if you need payload indexes.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "UpdateResult(operation_id=0, status=<UpdateStatus.COMPLETED: 'completed'>)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from qdrant_client.http import models\n",
    "2.  # Creates a range index for `metadata.page`, so you can use this indexed field to order your results by page number.\n",
    "\n",
    "\n",
    "client.create_payload_index(\n",
    "    collection_name=qdrant_collection_name,\n",
    "    field_name=\"metadata.page\",\n",
    "    # Assumes page numbers are stored as integers\n",
    "    field_schema=models.PayloadSchemaType.INTEGER,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Find and delete records\n",
    "\n",
    "1. Do an initial search on `metadata.source` based on the file name.\n",
    "2. Review the initial search result to see if you get exactly what you want.\n",
    "3. Iterate using `metadata.source` and `metadata.page_content` until you are sure.\n",
    "4. Confirm it's giving you the doc, the whole doc, and nothing but the doc.\n",
    "5. Delete away!\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of points found: 0\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "This script uses a filter (scroll_filter) to count the number of points that match criteria and show the points. \n",
    "\n",
    "NOTE: The filter is case-sensitive and uses the `MatchText` condition. \n",
    "NOTE: This will not catch records lacking in a page field or a page field that lives in a different location.\n",
    "Order_by requires qdrant-client 1.8 or later\n",
    "'''\n",
    "\n",
    "from qdrant_client.http import models\n",
    "\n",
    "scroll_filter = models.Filter(\n",
    "    must=[\n",
    "        models.FieldCondition(\n",
    "            # key=\"page_content\",  # only in upsert>01NOV2024\n",
    "            # key=\"metadata.pdf_id\",  # only in upsert>01NOV2024\n",
    "            # key=\"metadata.pdf_file_name\",  # only in upsert>01NOV2024\n",
    "            # key=\"metadata.page_content\",  # pre-02NOV2024\n",
    "            key=\"metadata.source\",  # only usedful in pre-02NOV2024\n",
    "            match=models.MatchText(\n",
    "                text=\"Auxiliary_Division_Procedures_Guide_COMDTPUB\"\n",
    "            ),  # leave blank to get all\n",
    "        ),\n",
    "    ]\n",
    ")\n",
    "\n",
    "records = client.scroll(collection_name=qdrant_collection_name,\n",
    "                        scroll_filter=scroll_filter,\n",
    "                        with_payload=True,  # optional. Defaults to false\n",
    "                        with_vectors=False,  # optional. Defaults to false\n",
    "                        limit=10000,\n",
    "                        order_by=models.OrderBy(\n",
    "                            key=\"metadata.page\",  # Field for ordering\n",
    "                            direction=\"asc\"       # \"desc\" for descending order\n",
    "                        )\n",
    "                        )\n",
    "\n",
    "print(f\"Number of points found: {len(records[0])}\")\n",
    "records[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Then uses the filter to **<span style=\"color:red\">DELETE</span>** based on `metadata.source`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qdrant_client.http import models\n",
    "\n",
    "client.delete(\n",
    "    collection_name=qdrant_collection_name,\n",
    "    points_selector=scroll_filter,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## OTHER EXAMPLES\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example: Find points based on `source`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qdrant_client.http import models\n",
    "\n",
    "records = client.scroll(\n",
    "    collection_name=qdrant_collection_name,\n",
    "    with_payload=True,  # change to True to see the payload\n",
    "    with_vectors=False,  # change to True to see the vectors\n",
    "    limit=100000,  # 👈 don't forget to set this\n",
    "\n",
    "    scroll_filter=models.Filter(\n",
    "        must=[\n",
    "            models.FieldCondition(\n",
    "                # source is pdf_filepath in upsert<01NOV2024 afterwards its URL of pdf\n",
    "                key=\"metadata.source\",\n",
    "                match=models.MatchText(\n",
    "                    text=\"AUX-PL-017(A)\"),\n",
    "            ),\n",
    "        ]\n",
    "    ),\n",
    ")\n",
    "\n",
    "print(f\"Number of points found: {len(records[0])}\")\n",
    "#records"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example: Find points based on `scope`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of points found: 10\n"
     ]
    }
   ],
   "source": [
    "from qdrant_client.http import models\n",
    "from qdrant_client.http.models import DatetimeRange\n",
    "\n",
    "records = client.scroll(\n",
    "    collection_name=\"ASK_vectorstore\",\n",
    "    with_payload=True,  # change to True to see the payload\n",
    "    with_vectors=False,  # change to True to see the vectors\n",
    "    limit=10, # 👈 don't forget to set this\n",
    "\n",
    "    scroll_filter=models.Filter(\n",
    "        must=[\n",
    "            models.FieldCondition(\n",
    "                key=\"metadata.scope\",\n",
    "                match=models.MatchText(\n",
    "                    text=\"1_national\"),\n",
    "            ),\n",
    "        ]\n",
    "    ),\n",
    ")\n",
    "\n",
    "print(f\"Number of points found: {len(records[0])}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example: Find points based on `expiration_date`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of points found: 8834\n"
     ]
    }
   ],
   "source": [
    "from qdrant_client.http import models\n",
    "from qdrant_client.http.models import DatetimeRange\n",
    "from datetime import datetime, timezone\n",
    "\n",
    "records = client.scroll(\n",
    "    collection_name=\"ASK_vectorstore\",\n",
    "    with_payload=True,\n",
    "    with_vectors=False,\n",
    "    limit=10000,  # 👈 don't forget to set this\n",
    "    scroll_filter=models.Filter(\n",
    "        must=[\n",
    "            models.FieldCondition(\n",
    "                key=\"metadata.expiration_date\",\n",
    "                range=DatetimeRange(gt=datetime.now(\n",
    "                    timezone.utc).isoformat())  # datetime > today\n",
    "            )\n",
    "        ]\n",
    "    )\n",
    ")\n",
    "\n",
    "print(f\"Number of points found: {len(records[0])}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example: Find points based on `public_release`  (a boolean)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of points found: 0\n"
     ]
    }
   ],
   "source": [
    "from qdrant_client.http import models\n",
    "from qdrant_client.http.models import DatetimeRange\n",
    "from datetime import datetime, timezone\n",
    "\n",
    "records = client.scroll(\n",
    "    collection_name=\"ASK_vectorstore\",\n",
    "    with_payload=True,\n",
    "    with_vectors=False,\n",
    "    limit=1000,  # 👈 don't forget to set this\n",
    "    scroll_filter=models.Filter(\n",
    "        must=[\n",
    "            models.FieldCondition(\n",
    "                key=\"metadata.public_release\",\n",
    "                match=models.MatchValue(value=False)\n",
    "            )\n",
    "        ]\n",
    "    )\n",
    ")\n",
    "\n",
    "print(f\"Number of points found: {len(records[0])}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example: **<span style=\"color:red\">Delete points based on the `source` as defined in THIS cell**</span>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qdrant_client.http import models\n",
    "\n",
    "client.delete(\n",
    "    collection_name=qdrant_collection_name,\n",
    "    points_selector=models.Filter(\n",
    "        must=[\n",
    "            models.FieldCondition(\n",
    "                key=\"metadata.source\",\n",
    "                match=models.MatchText(\n",
    "                    text=\"_______\"),  # BE CAREFUL CHECK THIS IS WHAT YOUR\n",
    "            ),\n",
    "        ]\n",
    "    ),\n",
    ")\n",
    "\n",
    "print(f\"Number of points deleted: {len(records[0])}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example: **<span style=\"color:red\">Delete points based on the `pdf_id` as defined in THIS cell**</span>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "UpdateResult(operation_id=23214, status=<UpdateStatus.COMPLETED: 'completed'>)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from qdrant_client.http import models\n",
    "\n",
    "client.delete(\n",
    "    collection_name=qdrant_collection_name,\n",
    "    points_selector=models.Filter(\n",
    "        must=[\n",
    "            models.FieldCondition(\n",
    "                key=\"metadata.pdf_id\",\n",
    "                match=models.MatchText(\n",
    "                    text=\"20764d16-7066-5d44-9047-2cfa8a8fb888\"),  # BE CAREFUL CHECK THIS IS WHAT YOUR\n",
    "            ),\n",
    "        ]\n",
    "    ),\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example: **<span style=\"color:red\">Delete points based on the `id` as defined in THIS cell**</span>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "UpdateResult(operation_id=70666, status=<UpdateStatus.COMPLETED: 'completed'>)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from qdrant_client.http import models\n",
    "\n",
    "\n",
    "client.delete(\n",
    "    collection_name=qdrant_collection_name,\n",
    "    points_selector=models.PointIdsList(\n",
    "        points=[\"4cd5a55c-f37b-5c5d-b13d-b34d0a52305f\"],\n",
    "    ),\n",
    ")\n",
    "\n",
    "print(f\"Number of points deleted: {len(records[0])}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example: Find points based on `id`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of points found: 0\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "([], None)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from qdrant_client.http import models\n",
    "\n",
    "records = client.scroll(\n",
    "    collection_name=qdrant_collection_name,\n",
    "    with_payload=True,  # change to True to see the payload\n",
    "    with_vectors=False,  # change to True to see the vectors\n",
    "    limit=100000,   # 👈 don't forget to set this\n",
    "    scroll_filter=models.Filter(\n",
    "        must=[\n",
    "            models.HasIdCondition(\n",
    "                has_id=[\"00cba8def26846769fd875fddf9f55bc\"])\n",
    "        ]\n",
    "    )\n",
    ")\n",
    "\n",
    "print(f\"Number of points found: {len(records[0])}\")\n",
    "records"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example: Find points based on `pdf_id`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of points found: 5\n"
     ]
    }
   ],
   "source": [
    "from qdrant_client.http import models\n",
    "\n",
    "records = client.scroll(\n",
    "    collection_name=qdrant_collection_name,\n",
    "    with_payload=True,  # change to True to see the payload\n",
    "    with_vectors=False,  # change to True to see the vectors\n",
    "    limit=1000,  # 👈 don't forget to set this\n",
    "\n",
    "    scroll_filter=models.Filter(\n",
    "        must=[\n",
    "            models.FieldCondition(\n",
    "                key=\"metadata.pdf_id\",  # only in upsert>14NOV2024\n",
    "                match=models.MatchText(\n",
    "                    text=\"a9794b42-9ad4-5992-8dbe-29576740d623\"),\n",
    "            ),\n",
    "        ]\n",
    "    ),\n",
    ")\n",
    "\n",
    "print(f\"Number of points found: {len(records[0])}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'metadata': {'upsert_date': '2025-04-22T01:12:54Z',\n",
       "  'embedding': 'text-embedding-ada-002',\n",
       "  'expiration_date': '2099-12-31T00:00:00Z',\n",
       "  'organization': 'DCO',\n",
       "  'scope': 'district',\n",
       "  'pdf_file_name': 'D7-AUX-ID-Card-Request-Procedures.pdf',\n",
       "  'issue_date': '2025-04-18T00:00:00Z',\n",
       "  'public_release': True,\n",
       "  'aux_specific': True,\n",
       "  'publication_number': 'D7-SOP-AD-002',\n",
       "  'pdf_id': 'a9794b42-9ad4-5992-8dbe-29576740d623',\n",
       "  'source': './pdfs_backlog/D7-SOP-AD-002 Proctor Designation.pdf',\n",
       "  'unit': '70.0',\n",
       "  'title': 'Proctor Request and Designation Process Standard Operating Procedures',\n",
       "  'page': 3},\n",
       " 'page_content': 'District 7 Proctor Request and Designation Process \\nD7-SOP-AD-002 4 18 April 2025 \\n \\n4) Responsible: Directors Administrative Aide (DAA) \\n5) Procedure: \\na. Receive the Help Desk ticket with the completed Proctor designation request. \\nb. Validate member information in AUXDATA. \\ni. AUXOP qualified \\nii. Current in Core Training \\niii. Current in Annual Uniform Inspection \\nc. Annotate Help Desk ticket to confirm validation of Proctor requirements. \\nd. Route the Help Desk ticket with the verified Proctor designation request to the \\nDistrict Commodore. \\nE. Activity 1.5 – Review Request and Endorse/Comment \\n1) Input: Completed Proctor Designation \\n2) Output: Request Endorsement/Comments  \\n3) Tools: Email \\n4) Responsible: District 7 Chain of Leadership and Management \\n5) Procedure: \\na. Receive and review the completed Proctor designation request. \\nb. Add endorsement or comments to request. \\nc. Route the next level in the Chain of Leadership and Management. \\nF. Activity 1.6 – Review and Approve Request \\n1) Input: Help Desk Ticket with Verified Proctor Designation Request \\n2) Output: Help Desk Ticket with Approved Proctor Designation Request \\n3) Tools: Help Desk \\n4) Responsible: District 7 Commodore \\n5) Procedure: \\na. Receive the Help Desk ticket with the verified Proctor designation request. \\nb. Review and approve/disapprove the request. \\ni. If request is not approved, route back to the Flotilla Commander for further \\nprocessing. \\nc. Route the Help Desk ticket with the approved Proctor designation request to \\nDIRAUX. \\nG. Activity 1.7 – Review / Approve / Process Request \\n1) Input: Help Desk Ticket with Approved Proctor Designation Request \\n2) Output: Letter of Designation; Updated AUXDATA Member Record'}"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "records[0][0].payload"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example: Find points that are missing the `page` field\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of points found: 0\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "([], None)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from qdrant_client.http import models\n",
    "\n",
    "records = client.scroll(\n",
    "    collection_name=qdrant_collection_name,\n",
    "    with_payload=True,  # Set to True to see the payload\n",
    "    with_vectors=False,  # Set to True to see the vectors\n",
    "    limit=10000,  # 👈 don't forget to set this\n",
    "\n",
    "    scroll_filter=models.Filter(\n",
    "        must=[\n",
    "            models.IsEmptyCondition(is_empty=models.PayloadField(key=\"metadata.page\"),\n",
    "                                    )\n",
    "        ]\n",
    "    )\n",
    ")\n",
    "\n",
    "print(f\"Number of points found: {len(records[0])}\")\n",
    "records"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example: Find points where `page` field does not exist or is inside the metadata dictionary!\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qdrant_client.http import models\n",
    "\n",
    "records = client.scroll(\n",
    "    collection_name=qdrant_collection_name,\n",
    "    with_payload=True,  # Set to True to see the payload\n",
    "    with_vectors=False,  # Set to True to see the vectors\n",
    "    limit=10000,  # 👈 don't forget to set this\n",
    "\n",
    "    scroll_filter=models.Filter(\n",
    "        must=[\n",
    "            models.IsEmptyCondition(is_empty=models.PayloadField(key=\"page\"),\n",
    "                                    )\n",
    "        ]\n",
    "    )\n",
    ")\n",
    "\n",
    "print(f\"Number of points found: {len(records[0])}\")\n",
    "records"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example: Find points based on both `page` AND `source`\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qdrant_client.http import models\n",
    "\n",
    "records = client.scroll(\n",
    "    collection_name=qdrant_collection_name,\n",
    "    with_payload=True,  # change to True to see the payload\n",
    "    with_vectors=False,  # change to True to see the vectors\n",
    "    limit=1000,  # 👈 don't forget to set this\n",
    "\n",
    "    scroll_filter=models.Filter(\n",
    "        must=[\n",
    "            models.FieldCondition(\n",
    "                # source is pdf_filepath in upsert<01NOV2024 afterwards its URL of pdf\n",
    "                # key=\"metadata.source\",\n",
    "                # key=\"page_content\",  # only in upsert>01NOV2024\n",
    "                key=\"metadata.page_content\",\n",
    "                match=models.MatchText(\n",
    "                    text=\"\"),\n",
    "            ),\n",
    "            models.FieldCondition(\n",
    "                key=\"metadata.page\",\n",
    "                match=models.MatchValue(\n",
    "                    value=0),\n",
    "            ),\n",
    "        ]\n",
    "    ),\n",
    ")\n",
    "\n",
    "print(f\"Number of points found: {len(records[0])}\")\n",
    "records"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example: Create a list of all unique file names \n",
    "(assuming they are not missing the page key)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qdrant_client.http import models\n",
    "\n",
    "records = client.scroll(\n",
    "    collection_name=qdrant_collection_name,\n",
    "    with_payload=True,  # change to True to see the payload\n",
    "    with_vectors=False,  # change to True to see the vectors\n",
    "    limit=2,  # 👈 don't forget to set this\n",
    "\n",
    "    scroll_filter=models.Filter(\n",
    "        must=[\n",
    "            models.FieldCondition(\n",
    "                key=\"metadata.page\",\n",
    "                match=models.MatchValue(\n",
    "                    value=0),\n",
    "            ),\n",
    "        ]\n",
    "    ),\n",
    ")\n",
    "\n",
    "print(f\"Number of points found: {len(records[0])}\")\n",
    "records"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "closing client\n"
     ]
    }
   ],
   "source": [
    "lib.close_qdrant(client)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### REFERENCE: Example record"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "\n",
    "Record(\n",
    "    id='01999d49fe0044478a1bffbb078938e8', \n",
    "    payload={\n",
    "        'page_content': 'I Want a VSC\\n•Revised “I Want a VSC” form is online with a new look.\\n•Major changes are:\\n•The originator no longer sees the selected VEs’ emails, only \\nselected VEs see the emails.\\n•Originator gets an email indicating they’ll be contacted.\\n•Its’ important VEs “Reply All” they’ve made contact or aren’t \\navailable.\\n•If the originator does not receive a response -they wil be instructed \\nto initiate another request.\\n“I Want a VSC” can be found at:https://wow.uscgaux.info/i_want_a_vsc/index.php\\n3\\n٠The new “I Want A VSC” program is on-line.\\n•Major changes are:\\n•Originator no longer see VEs’ emails.\\n•Originator receives an email indicating they’ll be contacted.\\n•It’s important VEs “Reply All” they’ve made contact with originator or that \\nthey’re not available.\\n•If the originator hears nothing they’re instructed to initiate another request.\\n•The new form is on line and can be found on the V-Directorate web page or with the \\nQR code or web site.', \n",
    "        'metadata': {'source': './test_pdfs_copies_delete_after_use/VE_workshop_Dec_4_22_2023.pdf', 'page': 2, 'title': 'Auxiliary Vessel Examiner VE Workshop 2023', 'pdf_id': 'a0d00ff2-7ad5-5ea7-baa0-0d738380cd3e', 'publication_number': nan, 'organization': nan, 'scope': '1_national', 'issue_date': '2024-02-16T00:00:00Z', 'upsert_date': nan, 'expiration_date': '2034-02-16T00:00:00Z', 'aux_specific': True, 'public_release': True, 'embedding': 'text-embedding-ada-002', 'page_count': 31}\n",
    "        }, \n",
    "    vector=None, \n",
    "    shard_key=None, \n",
    "    order_value=None\n",
    "),\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv-311",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
