{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "66bdf56e",
   "metadata": {},
   "source": [
    "# Upsert PDFs to qdrant"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f7c0f28",
   "metadata": {},
   "source": [
    "#### **HOW IT WORKS**: It operate in PDF-wise fashion, unlike my previous notebooks that loaded and chunked an entire PDF in one go. This one loads and chunks PDFs one at a time to enable for checking the id and enabling some better error handling."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ee6ffdf",
   "metadata": {},
   "source": [
    "To upsert a single pdf:\n",
    "1. Set the qdrant collection name \n",
    "2. Choose local or cloud\n",
    "3. Run cells individually until you generate a pdf_id.\n",
    "4. Add the pdf medata into the spreadsheet\n",
    "5. Run the rest of the cells to upsert the pdf\n",
    "\n",
    "To upsert a folder of pdfs:\n",
    "1. Set the qdrant collection name \n",
    "2. Choose local or cloud\n",
    "3. Run the cells individually, stopping at `qdrant.add_documents(chunks)`. This initialize all the functions and config variables needed for the batch process. Yes, you will need to specify a specific PDF file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "10c1f7b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# %pip install -qU pip\n",
    "# %pip install -qU langchain-openai openai langchain-community langchain-qdrant qdrant-client pympler pypdf==5.0.1\n",
    "\n",
    "# %pip install git+https://github.com/pikepdf/pikepdf.git#egg=pikepdf this requies python>=3.9"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5bda072",
   "metadata": {},
   "source": [
    "## 0. Imports and Configs\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8ed9776c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/drew_wilkins/Drews_Files/Drew/Python/Localcode/.venv-311/bin/python\n"
     ]
    }
   ],
   "source": [
    "import os, sys\n",
    "from dotenv import load_dotenv\n",
    "\n",
    "# Confirm correct interpreter is used\n",
    "print(sys.executable)\n",
    "\n",
    "# Add parent directory to sys.path to import modules from a subdirectory\n",
    "sys.path.append(os.path.abspath('..'))\n",
    "import library_utils as lib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b790f1ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "ENV_PATH = \"/Users/drew_wilkins/Drews_Files/Drew/Python/Localcode/.env\"\n",
    "load_dotenv(ENV_PATH)\n",
    "\n",
    "# Config LangSmith observability\n",
    "# LANGCHAIN_API_KEY = os.environ[\"LANGCHAIN_API_KEY\"]\n",
    "# os.environ[\"LANGCHAIN_TRACING_V2\"] = \"false\"\n",
    "# os.environ[\"LANGCHAIN_PROJECT\"] = \"ASK_main_upsert_notebook\"\n",
    "\n",
    "\n",
    "# Config Qdrant\n",
    "QDRANT_URL = os.getenv(\"QDRANT_URL\")\n",
    "QDRANT_API_KEY = os.getenv(\"QDRANT_API_KEY\")\n",
    "# QDRANT_URL = st.secrets[\"QDRANT_URL\"]\n",
    "# QDRANT_API_KEY = st.secrets[\"QDRANT_API_KEY\"]\n",
    "QDRANT_PATH = \"./qdrant_db\"\n",
    "\n",
    "\n",
    "# Config langchain_openai\n",
    "from langchain_openai import OpenAIEmbeddings\n",
    "OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY_ASK\")\n",
    "# OPENAI_API_KEY = st.secrets[\"OPENAI_API_KEY\"]\n",
    "\n",
    "\n",
    "# Misc configs for tracing\n",
    "CONFIG = {\n",
    "    \"splitter_type\": \"CharacterTextSplitter\",\n",
    "    \"chunk_size\": 2000,\n",
    "    \"chunk_overlap\": 200,\n",
    "    \"length_function\": len,\n",
    "    \"separators\": [\"}\"],  # [\" \", \",\", \"\\n\"]\n",
    "    \"qdrant_collection_name\": \"ASK_vectorstore\",\n",
    "    \"embedding_model\": \"text-embedding-ada-002\",  # alt: text-embedding-3-large\n",
    "    \"embedding_dims\": 1536,  # alt: 1024\n",
    "    \"vector_name\": \"text-dense\",\n",
    "    \"sparse_vector_name\": \"None\",\n",
    "    \"sparse_embedding\": \"None\",\n",
    "    \"search_type\": \"mmr\",\n",
    "    \"k\": 5,\n",
    "    'fetch_k': 20,   # fetch 30 docs then select 5\n",
    "    'lambda_mult': .7,    # 0= max diversity, 1 is min. default is 0.5\n",
    "    \"score_threshold\": 0.5,\n",
    "    \"generation_model\": \"gpt-3.5-turbo-16k\",\n",
    "    \"temperature\": 0.7,\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7e82ee0",
   "metadata": {},
   "source": [
    "## 1. Initialize the Qdrant and LC Vectorstore objects"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "61a90112",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "qdrant location: cloud\n",
      "\n",
      "Available collections:\n",
      "ASK_vectorstore\n",
      "ask_pdf_docs\n",
      "ASK_vectorstore-backup21APR2025\n",
      "ask_pdf_pages\n"
     ]
    }
   ],
   "source": [
    "from qdrant_client import QdrantClient\n",
    "\n",
    "client = QdrantClient(\n",
    "    url=QDRANT_URL,  # for cloud\n",
    "    api_key=QDRANT_API_KEY,  # for cloud\n",
    "    prefer_grpc=True,\n",
    "    # path=QDRANT_PATH,  # for local\n",
    ")\n",
    "\n",
    "\n",
    "lib.which_qdrant(client)\n",
    "lib.list_collections(client)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d5148dc3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "status=<CollectionStatus.GREEN: 'green'> optimizer_status=<OptimizersStatusOneOf.OK: 'ok'> vectors_count=None indexed_vectors_count=10566 points_count=11615 segments_count=2 config=CollectionConfig(params=CollectionParams(vectors=VectorParams(size=1536, distance=<Distance.COSINE: 'Cosine'>, hnsw_config=None, quantization_config=None, on_disk=True, datatype=None, multivector_config=None), shard_number=1, sharding_method=None, replication_factor=1, write_consistency_factor=1, read_fan_out_factor=None, on_disk_payload=True, sparse_vectors={'text-sparse': SparseVectorParams(index=SparseIndexParams(full_scan_threshold=None, on_disk=False, datatype=None), modifier=None)}), hnsw_config=HnswConfig(m=16, ef_construct=100, full_scan_threshold=10000, max_indexing_threads=0, on_disk=False, payload_m=None), optimizer_config=OptimizersConfig(deleted_threshold=0.2, vacuum_min_vector_number=1000, default_segment_number=0, max_segment_size=None, memmap_threshold=None, indexing_threshold=20000, flush_interval_sec=5, max_optimization_threads=1), wal_config=WalConfig(wal_capacity_mb=32, wal_segments_ahead=0), quantization_config=None, strict_mode_config=None) payload_schema={}\n"
     ]
    }
   ],
   "source": [
    "collection_info = client.get_collection(\n",
    "    collection_name=\"ASK_vectorstore\")\n",
    "print(collection_info)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "583113b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<langchain_qdrant.qdrant.QdrantVectorStore at 0x319329490>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from langchain_qdrant import QdrantVectorStore\n",
    "\n",
    "# Initialize a LangChain vectorstore object\n",
    "qdrant = QdrantVectorStore(client=client,\n",
    "                           collection_name=CONFIG[\"qdrant_collection_name\"],\n",
    "                           # embedding here is LC interface to the embedding model\n",
    "                           embedding=OpenAIEmbeddings(\n",
    "                               model=CONFIG[\"embedding_model\"]),\n",
    "                           validate_collection_config=True  # Skip validation\n",
    "                           )\n",
    "\n",
    "\n",
    "qdrant"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "126f91a5",
   "metadata": {},
   "source": [
    "## 2. Specify the file locations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4b738407",
   "metadata": {},
   "outputs": [],
   "source": [
    "pdf_filename = \"D7-SOP-AD-002_Proctor_Designation.pdf\"  #\n",
    "pdf_source_directory = \"./pdfs_backlog\"\n",
    "pdf_path = os.path.join(pdf_source_directory, pdf_filename)\n",
    "\n",
    "metadata_source_path = \"./library_catalog_2025-04-21.xlsx\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b171c0e6",
   "metadata": {},
   "source": [
    "## 3. Generate PDF ID"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f506eb0a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "UUID: a9794b42-9ad4-5992-8dbe-29576740d623   for file: 'D7-SOP-AD-002_Proctor_Designation.pdf'\n"
     ]
    }
   ],
   "source": [
    "pdf_id = lib.get_pdf_id(pdf_path)\n",
    "print(f\"UUID: {pdf_id}   for file: '{pdf_filename}'\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "450dd131",
   "metadata": {},
   "source": [
    "NOTE: Don't forget to add this UUID into the Excel spreadsheet and SAVE IT so it can be accessed below."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a068a7a",
   "metadata": {},
   "source": [
    "## 4. Check if PDF is already in Qdrant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "23f4e852",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''usage'''\n",
    "lib.is_pdf_id_in_qdrant(client, CONFIG, pdf_id)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a9dfdb7",
   "metadata": {},
   "source": [
    "## 5. Retrieve the PDF file's metadata into a dictionary; edit and add stuff to it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "29e05885",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successfully accessed metadata for pdf: a9794b42-9ad4-5992-8dbe-29576740d623\n",
      "Successfully added upsert date 2025-04-22T21:05:15Z to metadata\n",
      "\n",
      "Metadata:\n",
      "\n",
      "Key                       Type         Value\n",
      "----------------------------------------------------------------------\n",
      "title                     str          Proctor Request and Designation Process ...\n",
      "pdf_id                    str          a9794b42-9ad4-5992-8dbe-29576740d623\n",
      "publication_number        str          D7-SOP-AD-002\n",
      "organization              str          DCO\n",
      "scope                     str          District\n",
      "unit                      str          7\n",
      "issue_date                str          2025-04-18T00:00:00Z\n",
      "upsert_date               str          2025-04-22T21:05:15Z\n",
      "expiration_date           str          2099-12-31T00:00:00Z\n",
      "aux_specific              bool         True\n",
      "public_release            bool         True\n",
      "pdf_file_name             str          D7-SOP-AD-002_Proctor_Designation.pdf\n",
      "embedding                 str          text-embedding-ada-002\n"
     ]
    }
   ],
   "source": [
    "planned_metadata = lib.get_planned_metadata_for_single_record(\n",
    "    pdf_id, metadata_source_path)\n",
    "\n",
    "print(\"\\nMetadata:\\n\")\n",
    "print(f\"{'Key':<25} {'Type':<12} {'Value'}\")\n",
    "print(\"-\" * 70)\n",
    "\n",
    "for k, v in planned_metadata.items():\n",
    "    value_type = type(v).__name__\n",
    "    print(\n",
    "        f\"{k:<25} {value_type:<12} {str(v)[:40]}{'...' if len(str(v)) > 40 else ''}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3af90a7f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data types found by key in payload metadata:\n",
      "  - Key 'title' has data type: str\n",
      "  - Key 'pdf_id' has data type: str\n",
      "  - Key 'publication_number' has data type: str\n",
      "  - Key 'organization' has data type: str\n",
      "  - Key 'scope' has data type: str\n",
      "  - Key 'unit' has data type: str\n",
      "  - Key 'issue_date' has data type: str\n",
      "  - Key 'upsert_date' has data type: str\n",
      "  - Key 'expiration_date' has data type: str\n",
      "  - Key 'aux_specific' has data type: bool\n",
      "  - Key 'public_release' has data type: bool\n",
      "  - Key 'pdf_file_name' has data type: str\n",
      "  - Key 'embedding' has data type: str\n"
     ]
    }
   ],
   "source": [
    "# Just some type checking for debugging purposes\n",
    "\n",
    "print(\"Data types found by key in payload metadata:\")\n",
    "for key, value in planned_metadata.items():\n",
    "    value_type = type(value).__name__\n",
    "    print(f\"  - Key '{key}' has data type: {value_type}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4d35529",
   "metadata": {},
   "source": [
    "## 6. Merge the PDF content and metadata dict into LangChain Document objects"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1384586c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed ./pdfs_backlog/D7-SOP-AD-002_Proctor_Designation.pdf\n",
      "number of pages processed: 5\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import pypdf\n",
    "from langchain_community.document_loaders import PyPDFLoader\n",
    "\n",
    "\n",
    "def pdf_to_Docs_via_pypdf(pdf_path, planned_validated_metadata):  # pdf_dict is optional\n",
    "    \"\"\"Extrracts text and metadata for one PDF and turns them into a list of page-level Document objects (\"docs_pages\").\"\"\"\n",
    "\n",
    "    docs_pages = []\n",
    "\n",
    "    try:\n",
    "        loader = PyPDFLoader(pdf_path)\n",
    "        docs = loader.load()  # This returns a list of LC page document objects\n",
    "\n",
    "        with open(pdf_path, \"rb\") as pdf_file_obj:\n",
    "            reader = pypdf.PdfReader(pdf_file_obj)\n",
    "            # in case you want metadata from the orignal PDF\n",
    "            original_pdf_metadata = reader.metadata\n",
    "            enriched_metadata = {\n",
    "                'page_count': len(reader.pages),\n",
    "            }\n",
    "            planned_metadata.update(enriched_metadata)\n",
    "            planned_metadata.pop('pdf_file_name', None)\n",
    "\n",
    "        for doc in docs:\n",
    "            doc.metadata.update(planned_validated_metadata)\n",
    "            docs_pages.append(doc)\n",
    "\n",
    "        print(f\"Processed {pdf_path}\")\n",
    "        print(\"number of pages processed:\", len(docs_pages))\n",
    "    except FileNotFoundError:\n",
    "        print(f\"Error: Could not find {pdf_path}\")\n",
    "\n",
    "    return docs_pages\n",
    "\n",
    "\n",
    "'''usage'''\n",
    "docs_pages = pdf_to_Docs_via_pypdf(pdf_path, planned_metadata)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "03da1cbc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'source': './pdfs_backlog/D7-SOP-AD-002_Proctor_Designation.pdf',\n",
       " 'page': 0,\n",
       " 'title': 'Proctor Request and Designation Process Standard Operating Procedures',\n",
       " 'pdf_id': 'a9794b42-9ad4-5992-8dbe-29576740d623',\n",
       " 'publication_number': 'D7-SOP-AD-002',\n",
       " 'organization': 'DCO',\n",
       " 'scope': 'District',\n",
       " 'unit': '7',\n",
       " 'issue_date': '2025-04-18T00:00:00Z',\n",
       " 'upsert_date': '2025-04-22T21:05:15Z',\n",
       " 'expiration_date': '2099-12-31T00:00:00Z',\n",
       " 'aux_specific': True,\n",
       " 'public_release': True,\n",
       " 'embedding': 'text-embedding-ada-002',\n",
       " 'page_count': 5}"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "docs_pages[0].metadata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "248b0a38",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'D7-SOP-AD-002 1 18 April 2025    \\n \\n \\n \\n \\nSeventh District Coast Guard Auxiliary \\nOffice of the District Commodore \\nSeventh Coast Guard District - (dpa) \\n909 SE 1st Avenue, Suite 446 \\nMiami, FL 33131 US \\n \\n \\nDistrict 7 \\nStandard Operating Procedure \\n \\nSOP Title:  Proctor Request and Designation Process \\nNumber:  D7-SOP-AD-002 \\nReference:  (a) Auxiliary Manual, COMDINST M16790.1 (series)  \\n    (b) Auxiliary Training Handbook – Boat Crew, ATH 16794.51 (series) \\n \\n1. PURPOSE. This Standard Operating Procedure (SOP) establishes the standardized process \\nwithin District Seven for requesting, appointing, and designating proctors for Coast Guard \\nAuxiliary course examinations, including online and in-person formats. In accordance with \\nguidance from the Chief Director of the Auxiliary, the authority to control and administer \\ncourse examinations resides with the Director of Auxiliary (DIRAUX), who may authorize \\neligible personnel to serve as proctors.  \\n \\n2. PROCTOR DESIGNATION. In accordance with reference (a), a commissioned, warrant, or \\npetty officer of the Coast Guard or Coast Guard Reserve, any Coast Guard civilian employee \\nor any Auxiliarist designated as an AUXOP, specifically appointed by the Director, may \\nproctor and process Operational Auxiliarist (AUXOP) specialty exams, including on-line \\nexams. An Auxiliarist who has successfully completed a specialty course(s) but has not yet \\nachieved AUXOP designation, and who has been specifically appointed by the Director, may \\nproctor and process the exam for that course(s), including the on-line exam. In accordance \\nwith reference (b), the NAVRULES 70 exam is required to be proctored by a proctor \\ndesignated by DIRAUX. \\n \\n3. PROCESS OVERVIEW. Auxiliarists requesting designation as a Proctor and unit leaders \\nwithin the Chain of Leadership and Management (COLM) responsible for processing Proctor \\ndesignation requests shall follow the process and routing guidance provided in this SOP. \\n \\nAll Proctor designation requests will be submitted electronically and should include the \\nAUXOP qualification status as well as the currency status of Auxiliary Core Training \\n(AUXCT) and the annual uniform inspection for the Proctor candidate. \\n \\nThe District 7 Help Desk shall serve as the primary routing and communications medium for \\nProctor designation processing. Email may be used for ancillary communications related to \\ncomments/endorsements by those members in the COLM who do not have administrative \\naccess to the District 7 Help Desk. \\n \\n \\n \\n \\n '"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "docs_pages[0].page_content"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f977e58",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "### Example enriched Langchain Page Document object\n",
    "\n",
    "```python\n",
    "page_content='Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus nunc sapien' metadata={'source': './raw_pdfs/lorem_ipsum.pdf', 'page': 1, 'page_count': 13, 'pdf_id': 'df6b2344-b73b-5c11-9f3e-aa2a370b1696'}\n",
    "```\n",
    "\n",
    "\n",
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52ea2a89",
   "metadata": {},
   "source": [
    "## 7. Chunk the Page-level Documents into chunked Documents\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ab05e49f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of chunks: 5\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Document(metadata={'source': './pdfs_backlog/D7-SOP-AD-002_Proctor_Designation.pdf', 'page': 0, 'title': 'Proctor Request and Designation Process Standard Operating Procedures', 'pdf_id': 'a9794b42-9ad4-5992-8dbe-29576740d623', 'publication_number': 'D7-SOP-AD-002', 'organization': 'DCO', 'scope': 'District', 'unit': '7', 'issue_date': '2025-04-18T00:00:00Z', 'upsert_date': '2025-04-22T21:05:15Z', 'expiration_date': '2099-12-31T00:00:00Z', 'aux_specific': True, 'public_release': True, 'embedding': 'text-embedding-ada-002', 'page_count': 5}, page_content='D7-SOP-AD-002 1 18 April 2025    \\n \\n \\n \\n \\nSeventh District Coast Guard Auxiliary \\nOffice of the District Commodore \\nSeventh Coast Guard District - (dpa) \\n909 SE 1st Avenue, Suite 446 \\nMiami, FL 33131 US \\n \\n \\nDistrict 7 \\nStandard Operating Procedure \\n \\nSOP Title:  Proctor Request and Designation Process \\nNumber:  D7-SOP-AD-002 \\nReference:  (a) Auxiliary Manual, COMDINST M16790.1 (series)  \\n    (b) Auxiliary Training Handbook – Boat Crew, ATH 16794.51 (series) \\n \\n1. PURPOSE. This Standard Operating Procedure (SOP) establishes the standardized process \\nwithin District Seven for requesting, appointing, and designating proctors for Coast Guard \\nAuxiliary course examinations, including online and in-person formats. In accordance with \\nguidance from the Chief Director of the Auxiliary, the authority to control and administer \\ncourse examinations resides with the Director of Auxiliary (DIRAUX), who may authorize \\neligible personnel to serve as proctors.  \\n \\n2. PROCTOR DESIGNATION. In accordance with reference (a), a commissioned, warrant, or \\npetty officer of the Coast Guard or Coast Guard Reserve, any Coast Guard civilian employee \\nor any Auxiliarist designated as an AUXOP, specifically appointed by the Director, may \\nproctor and process Operational Auxiliarist (AUXOP) specialty exams, including on-line \\nexams. An Auxiliarist who has successfully completed a specialty course(s) but has not yet \\nachieved AUXOP designation, and who has been specifically appointed by the Director, may \\nproctor and process the exam for that course(s), including the on-line exam. In accordance \\nwith reference (b), the NAVRULES 70 exam is required to be proctored by a proctor \\ndesignated by DIRAUX. \\n \\n3. PROCESS OVERVIEW. Auxiliarists requesting designation as a Proctor and unit leaders \\nwithin the Chain of Leadership and Management (COLM) responsible for processing Proctor \\ndesignation requests shall follow the process and routing guidance provided in this SOP. \\n \\nAll Proctor designation requests will be submitted electronically and should include the \\nAUXOP qualification status as well as the currency status of Auxiliary Core Training \\n(AUXCT) and the annual uniform inspection for the Proctor candidate. \\n \\nThe District 7 Help Desk shall serve as the primary routing and communications medium for \\nProctor designation processing. Email may be used for ancillary communications related to \\ncomments/endorsements by those members in the COLM who do not have administrative \\naccess to the District 7 Help Desk. \\n \\n \\n \\n \\n ')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from langchain.text_splitter import RecursiveCharacterTextSplitter\n",
    "\n",
    "\n",
    "def chunk(docs_pages):\n",
    "    # Turns a list of full-page Document objects (\"docs_pages\") into a list of smaller Document objects (i.e., \"docs_chunks\")\n",
    "    text_splitter = RecursiveCharacterTextSplitter(\n",
    "        chunk_size=CONFIG[\"chunk_size\"],\n",
    "        chunk_overlap=CONFIG[\"chunk_overlap\"],\n",
    "        length_function=CONFIG[\"length_function\"],\n",
    "        separators=CONFIG[\"separators\"]\n",
    "    )\n",
    "\n",
    "    docs_chunks = text_splitter.split_documents(docs_pages)\n",
    "\n",
    "    return docs_chunks\n",
    "\n",
    "\n",
    "'''usage'''\n",
    "docs_chunks = chunk(docs_pages)\n",
    "print(\"number of chunks:\", len(docs_chunks))\n",
    "docs_chunks[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5c1d5c5",
   "metadata": {},
   "source": [
    "## 8. Add the chunked Documents to Qdrant\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edcfa129",
   "metadata": {},
   "source": [
    "#### **Option 1**: Load a single PDF <span style=\"color:orange\"><b>SKIP THIS CELL for batch load</b></span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e156f799",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['a81bfe59a09f4fcaa4a9c97510f9feeb',\n",
       " 'fac7ed896e6e43b49cf5922f97dd0597',\n",
       " 'c67151252ef845f4856c61dc878e9277',\n",
       " '9c3c09b5677f43f489e95952913d650a',\n",
       " '4bd8cc3e59cf486583a7539dc1eb9a2a',\n",
       " 'f76b51c80ba6489ea8f93d6f006aabee',\n",
       " '6bbaa8f038ad4cb9ae8c1af496af2936',\n",
       " '12397763a55c435dbc6de58a9d685448',\n",
       " 'b259740b24b048bd9f32689eaf8312b0',\n",
       " 'ab10cd7af0bf47f29c14af353625af71',\n",
       " '129477b4b6af45e2ae09c8aaa9b2939d',\n",
       " '29023c5e34064f0692a2c8937c502928',\n",
       " 'f30f02ca3bd2414e8a7127ac86c3a1c2',\n",
       " 'fe30a463f1294b4b8a0d87367964b9d7',\n",
       " 'd2a17378979045ad982824bfb733235e',\n",
       " 'c139a7806dcc4e788039a37e8c4f5b27',\n",
       " 'ded08327e4984dd59e53ddff1d0821fb',\n",
       " '6b2ed4c2689b4afc95845b69003fc2f1',\n",
       " 'bdbc387375884a66be4132d9927d8fce',\n",
       " 'cfae666619ef4e289f0961d497019669',\n",
       " '61b265ec0c984ca5b88be142e11c35f7',\n",
       " '89b32558d2184fe4bfc3954db8cf64e6',\n",
       " 'da740145004242a0a95adaa11f0f3cd1',\n",
       " 'cd003d77c563458697cfab097fd3008f',\n",
       " 'e4db3306168144918518dd203d2b03e0',\n",
       " '3a47b58ea3b04063aaaf7a4d1c0498a9',\n",
       " '8a097a9685644e46aa43413d61847d54',\n",
       " '4b03c4cb1cfd4722a25b92587f3bbb1a',\n",
       " 'e51f2108cbc74dd18d81c19c7dbc8889',\n",
       " 'e8e8cedbdbe04c9a9dcf0ca878e8c193',\n",
       " 'd4b6109c5db9470199aca0b6437f3963',\n",
       " '2fc62d3a18b64e1d879e4c624bbb8967',\n",
       " '5e922d996706400fa61313b10dd9aa14',\n",
       " '50de2720ea514437813e5d898c757fb0',\n",
       " 'd67b50197fbd46a0994b737f47269dfa',\n",
       " 'bd16aca9c29d476998b679671783252b',\n",
       " 'cd7dbde58fb54286bc9e21d971f48e30',\n",
       " 'bbde807a162c4d559816112950d32a34',\n",
       " 'af65954db086480dab618bd693b2e0c0',\n",
       " '5dde016be6f242ce85159987d3508360',\n",
       " '7ef97cdb420f4423b32f158978120731',\n",
       " 'b8295c2f1c7543e691ac9bbcd0fcdb17',\n",
       " 'd01f355f2b2a436a9d8f17096d24aab0',\n",
       " '3e1d2d8d1df347468e83be827ba85655',\n",
       " '956594a7d5d7498899fca7e85c3df648',\n",
       " '78bb0cf1e30e4d96945acebb90efed56',\n",
       " '4de98683377b4cba97d0309a0bb1b1f6',\n",
       " '9f2ec45b2f9c4c5491e73c241c3e7cd4',\n",
       " '3e3bdeb51bd647ecb51da963515b75f3',\n",
       " '603f12115e6a4edab437f200e4477699',\n",
       " '5546084e43ec4c8a85f940f08ba37c4d',\n",
       " 'b3266acc9b56402db7cfa70c4cf334d6',\n",
       " '8c619224a205445d9005714be72a6867',\n",
       " 'dc48095f8ed441eab5a097270656141b',\n",
       " '7c0eef06a6fb44b89cd5a48e60565f26',\n",
       " '53dd8489c9e5413c86e30212fee40e17',\n",
       " 'a62094e7b5af4d9a868aaca116245d08',\n",
       " 'e89c521d8d214783bdcd9438fd86affc',\n",
       " 'f2f44e92c9b4456bba3b2565767dceb9',\n",
       " '5cc843efecc64ebab76d9e46baa2b540',\n",
       " '72947d4b33834c1696fba74544b5cd95',\n",
       " '66b46e988f004d7686d0b40080731368',\n",
       " '0b54fad6d9ff4ed8a848621cc44c4628',\n",
       " '189e40fb3c5d4309b1becef110c58f86',\n",
       " '9f30e3c3e688494e849432b28ea7f456',\n",
       " '9533052fc8ab4a4083b897618bef5cac',\n",
       " '82ae1869de6846399dc33e3bd5b35ceb',\n",
       " '076c1ffddd3e425f8ada521066cfc0bd',\n",
       " '1078654cd5354da8988977de2eb15cc8',\n",
       " '2c88cdca6296425cae00b7261d1f4823',\n",
       " '78620d7c7bf84691b54bdb054baec29a',\n",
       " 'aa334dcae9a7495aa6e55a8f966bf569',\n",
       " 'b16355d6b58c4238b98c53eb7dfc94c8',\n",
       " 'af558ccad8c54601b5fcd5ba54d43acf',\n",
       " '862c1eb7096b410ba59b135e44f1e453',\n",
       " '75a0200a8f394ac394482e9e6d31aa14',\n",
       " '33aaad244b6d4ed99ae29379d833883d',\n",
       " 'ee9338a95ec3484ca0c76c208437daf5',\n",
       " '79953b1f82884b2d81aefe7cc7e22343',\n",
       " 'e0b534fbe1904a5f9bfceb6cb8ed99cb',\n",
       " 'cbc9c730d79d4aab93ea87b50bbc5e22',\n",
       " '8170a92f35e34870a4baefb04493d94b',\n",
       " '13c317401bc14468aa20a54705de80e8',\n",
       " '7433652377234bdebcab76b5931392a4',\n",
       " 'e612f95ea7084c549a52de4216447c4c',\n",
       " '9943c722400f44a38d2f341fe7aa630a',\n",
       " '83e60a3ed9c04a8c9e775237135fba66',\n",
       " 'a01449fb63bd4fbaab421e8374872c8f',\n",
       " '10e926bee0b849f0856399a26d1494ec',\n",
       " '0e402d37e4354dd69b4342ea40c3104a',\n",
       " 'c23f3112f1ad467e9cb4a632330936bd',\n",
       " '52b6cedcb29c48da89f487618725b3c8',\n",
       " '3d4512c3fca441d3917b550d00232896',\n",
       " 'c71ec2c83aa54140bf3888af66a4dbba',\n",
       " 'aaad686d74a544ce95d65dbba54e1236',\n",
       " '1238a018ed2f48a0b5e6c63156d17395',\n",
       " 'a2f57c3a94e642df9e5b5363b2d94623',\n",
       " 'f99d0360d69e4f0e83e31299d61a4913',\n",
       " 'fbcae738aa40416486ce6cc259439a9b',\n",
       " 'ea5849cb26cc49f685c2bb5cde823071',\n",
       " '179ff2eb0c134c5ead967c5f07105cce',\n",
       " 'c932b6be2fa147dfbcb8f2035692bcd6',\n",
       " '562a480ee75e4ccbac4f5d89dbae1561',\n",
       " 'de110dfa4a394b33a570c74cccb1b94a',\n",
       " '7bdb3b88129045048ccd22a3cd3a0746',\n",
       " '1be7c1ca543341579f04eb3753e34786',\n",
       " '6a39a60414b9414ea074229e1fb44936',\n",
       " '8d21558bff3f4a3c866fb3a0d724bea0',\n",
       " '7c888c9039f64d8889f10b09886ce100',\n",
       " 'c7362294dd254e359bfb5f55d0712849',\n",
       " 'aef389c577ca4491bf06206647f83baa',\n",
       " '1adfc557dd2a451f882a39f0d7fd935a',\n",
       " '2d4a3c6954874675820244fcc0dc9c69',\n",
       " '2b35a29dfadf4e4492a23a72ba1fa0d1',\n",
       " '3273acdf1ecf41d2ae688213ec6fb7db',\n",
       " '67805fd302b040188ca7b61d95b8b0c2',\n",
       " '0e3941f635ab4a2184e405362e26cc9f',\n",
       " '29b841a0a55642d18f56caabe877d6ed',\n",
       " '8c875a023cd6404487e51c7612cd9a8a',\n",
       " '9c6e8eccd47347869ca3b5293c1436d7',\n",
       " '4f10752b2843435eb6e79df93ec4197a',\n",
       " '9b06b1f8adee4f5ea0167af82a0d03d2',\n",
       " 'a8c2be8af0324786ad2df007aa8552ff',\n",
       " '8caa513cf4bc4929a9e5b4467d502013',\n",
       " '9c720d89978b436a86525a8bdac0bcec',\n",
       " '568512b3528949569a101c92dcdc025d',\n",
       " '84d099c00a224647856e4b585c9a65f3',\n",
       " 'c0037dedd265442c9b683a2445818348',\n",
       " 'b2849d68721a4bf296e4022ba15528a4',\n",
       " '780fcdf460044ae49d05a13604bc6f77',\n",
       " 'ab9e755b46bd4fcca1c9356be2887801',\n",
       " '19deca45b0bb43378c6953f645de571e',\n",
       " 'f1214855806141f699dc75d1c6fb9ea4',\n",
       " 'c927fd4985fe488d86d4070510579da1',\n",
       " '09c39bf4ea224cacb84af5ac98f79729',\n",
       " 'd7c2db1cf7bb4c3688280f55d952c26a',\n",
       " '57b954e8fcfa4baba53228f75f73e657',\n",
       " '4840c6b692b44bcd906cf069bbeaf94d',\n",
       " '6e49c205da6447978b1235da207b2343',\n",
       " '61661d9b9aaa423a8b14953aa5c059a0',\n",
       " 'b9e98233d0024ada9dbb6b55020ed49d',\n",
       " '36a19a5a0e7b41ef8220a03117983071',\n",
       " '6b5e4df556394e5d91fefe03b9b2d9f5',\n",
       " 'c7337e47b2584a2bbe0edd5942096bb9',\n",
       " '4866b7db1d184be6a52cd9a9844f6a67',\n",
       " 'a712c6410abb44e6955702c5dabcdfcd',\n",
       " '786af50402594a00aaa60661227e9302',\n",
       " '4bc22a6d1c4d4c8caa3fbce875ff1edd',\n",
       " '32461c1a40c54178b6b8fd68a1526192',\n",
       " 'c6cf395ff71a42f7b336749ec0064f2c',\n",
       " 'e539cf6d508540338e6929473cf50918',\n",
       " 'b6c1e5feda7148098ae3fb5401528e54',\n",
       " '0e248a149b0147118870ee7710f28dec',\n",
       " '7ecc79d1491445faaf5d31ca49cbc47d',\n",
       " 'e92c2a7347e3427ea2c21c6fafa3a7a5',\n",
       " '23fd07c89940412cb5041b97c429263c',\n",
       " '2073e515d67c415b969cfbcd255f8d2a',\n",
       " '94e25ac2953a4b22bf571bf2b0c32b72',\n",
       " '2b5f88a8cc1c478da75ca97af1175c25',\n",
       " '2bd4921ad84342d3ad544c6db9add0e7',\n",
       " '63c6df4395eb40d9b0b993b56c0daa32',\n",
       " '3f0b201feca64c39a8166c444deae217',\n",
       " '071f80ca79854dde96c35f35701e2e7c',\n",
       " '023cde8fba5f48a0ba4bff0fbc1a1e4f',\n",
       " '758c0b1de50d4b3aabb33c46e8af1e85',\n",
       " 'ae50448ed1234c4c9047a55f6a11b451',\n",
       " '19e73763437142ad8f40ac47a4ed0e9b',\n",
       " 'b2232f43af9c4f8cb4798d7420292daf',\n",
       " '60d8990eb91b4c93bcaa16bf715b7ec5',\n",
       " '29ab780bcb15457b90da756c91cfd264',\n",
       " '9b9b8904b1d343b0bb39685f0fe52107',\n",
       " '8e54319c07e14be283d0dea43f5e7b13',\n",
       " '30af375b188047faa45ebe487b49469b',\n",
       " '47274f30173340019d969a96aa7b0213',\n",
       " 'dbc1ebe65fc7412cbc7b54baeccb4971',\n",
       " '1d6559d2da484f7b988644b766502fc8',\n",
       " 'dbb81f7f76a941c68a401efaaf4fa84c',\n",
       " '8ba0113d43344ab1ac3a14eeaebed7aa',\n",
       " '4b6c51419c724112bb4cf98218667dba',\n",
       " '10a03bc7fa244028bd35f9f77cf19cb5',\n",
       " 'f871e0493c72446095739cba59a95276',\n",
       " '4e47d4440ede4e63b5e65db64962345d',\n",
       " '2f9fa179fc434c6882ee5210f9704a3c',\n",
       " '47571a0cc3544df6889a80a53ebbad39',\n",
       " 'ba244006cc024c03972a82a227962d6c',\n",
       " 'c3ba6722d1ab441b9a874ea2db214492',\n",
       " '930abf0627d34a75be8b9c41d5477fab',\n",
       " '4461886da326463fad945b14fa46275c',\n",
       " 'cc670f67b51040fe92c25996df4a0026',\n",
       " '9a0ff9457a7e4496a174a3261735abe2',\n",
       " '83599a25193b479ba3c23a5855ea3798',\n",
       " 'cf5f47bcc13947aaa79d029725a8f330',\n",
       " 'aec23def78864206a7c16902e117745d',\n",
       " 'a6b5eed6c37d47bc9388ac8c1b335dd3',\n",
       " '4110cce49f2b45cb829ea2f74e72a86c',\n",
       " '7e135c872763485c91bbedcd33403291',\n",
       " '8da603da24684d168f1d402267b4e441',\n",
       " '7bf862fbd9b34c69aa6a52b8b52cad0c',\n",
       " 'dd0cb612e2bd446eb36803a2deac1723',\n",
       " '780eb10ab05b412f87735139de3db296',\n",
       " '83930b911f9d48c7880dbb787fe1741f',\n",
       " '01e8f90c1bf44da289d19b45f5fbb665',\n",
       " '4acb648c2e524bb2bb4a7194396ce375',\n",
       " '4cabcd32291d48a3a9538f69825d7110',\n",
       " 'e6a378b9f46e43eda2e3b22c719dc09a',\n",
       " '7d704b4ff92f4bcba02a1719b3e576e5',\n",
       " '5c977fc172474de9baa849e1f2c26a63',\n",
       " 'cd40286c2d6f4b1f894a3efddd0373e5',\n",
       " 'd15ad96ce6a84e4cb51ea78518e369e1',\n",
       " '779912bafa29433682f00153da28d899',\n",
       " 'eae5687cfc964093b14e658bc632735e',\n",
       " '355cac1516fd4ed1a5150d96b41a9677',\n",
       " '71817ae0cfb44baa80416c2b918ae40d',\n",
       " '84afcfc2590443a0b34c65df4f04b9a6',\n",
       " '41191324e1e64fe78a8dac46d8bdf7f4',\n",
       " 'f4c00accc28b46b2a2a7a0c9ad62ae9a',\n",
       " '37a5986ad4a24f6b9b72b3ade30d135f',\n",
       " '20fa7d1d2c9d4ae59364f52d11930c9a',\n",
       " '64019c7952384e5d885046a6c149157b',\n",
       " 'cdcc2662c69b4314bf0af2a0715ff386',\n",
       " '39ac3dafafe04116a54f42de1bc64a65',\n",
       " '801ec491cecb41b4adbedfbe46c182cb',\n",
       " '6b41c376daa84560b80611e3138b7edb',\n",
       " '27abe0abf5674de2844df595b8092443',\n",
       " '113bd22251434a98886356cdf9dbda11',\n",
       " 'bbd1df573549416ea5122a99cfc82903',\n",
       " '1e91ab2f2a914094a8b96c565aa885b7',\n",
       " 'b5dde5c8440f4b2ab5289acab95ec3a3',\n",
       " 'b123e2b9b53246fca9291dba6acb81f1',\n",
       " '9142e9055c094b2fa53424dd0e0a62be',\n",
       " '4baed1790e7849078fd002a435a69bb3',\n",
       " '37184782a719451ea316918472504d14',\n",
       " '8b85bab4087e45a39f75c70a96cc13da',\n",
       " '264ea5977ea34b76bacaf0f4d1f67c92',\n",
       " '85f5f0bc76ea408cb4950d58bf870696',\n",
       " '729dab556fb54f19ae73d67215888c33',\n",
       " '5d4d882a19a14b7db08040b4b6975073',\n",
       " 'a05ed048e0154551ba6540fa628c7078',\n",
       " '0c96873bc8a242868762ac687a6be074',\n",
       " 'ac52d51031954e31b4a56a4f60f5c74a',\n",
       " 'cee8e1a6f9114b12844eb2dec08cf0b2',\n",
       " '87d03e31c51f404e8fac59cbf49c637c',\n",
       " '3766eb931ae042a8a5d6854549b9e8a6',\n",
       " '8c26fa72f16541bab40f82847dd19fad',\n",
       " '2ed273eb562b4c09b0a72dd339babc13',\n",
       " 'a09d4695f83c490585a135a248cb6001',\n",
       " '3e40aa040f794866ac0b041732db85c0',\n",
       " '81d9465c44da4ed79df6d66be1f0535b',\n",
       " 'bff84f939c3a446ab7acc014af0afedd',\n",
       " '9daf455a2948474e87b03d60c0ccc215',\n",
       " '08d1757a3fb94bef8bbf43a505bc475a',\n",
       " 'd92dacd4e5e04a8eb3ab9f1a0b905e1c',\n",
       " '7ed96e02f0af4c208e4641b7b16f9419',\n",
       " '54393ad221a14724a043a991327ec7e3',\n",
       " '06eac8ee37e940f8aa7a8ca7de66d8ac',\n",
       " '7f6ca81f2d7e467d9c5b580f9e7c7889',\n",
       " '1f1b954baa5d44cfba856b6ff9fd7e68',\n",
       " '150dbe91bbe54bcf9987135a575de010',\n",
       " 'f56b2b42e3b641f49351424fe35b9676',\n",
       " '4fbe03c7c99b4e5192cf2ef1b83dbe4f',\n",
       " 'f46a9b121ef3463f91c70239e2fd6f77',\n",
       " '83f7e1c9c0a447c5bc4a30fccb7c2688',\n",
       " '9c9569063b1c4c25ae0c984966c51c91',\n",
       " 'af138319208746ca80b56caa2da4aea3',\n",
       " '887d7e572cba4253b5068b1b137fdc50',\n",
       " '66c7e414949d4c449c607bb1f7a1fcaa',\n",
       " '8892df9560474b38a3fcf5af2e72f3ed',\n",
       " '51c059f4f1624d1e86f5edebc77a5d86',\n",
       " '6313f6ac611b4eecb8125f488231fe52',\n",
       " '7f84de892bab4188bef8b36ff90b6ff2',\n",
       " '724e0a2f43754810ac5ab8d7f171d5c6',\n",
       " '719e33b9401d4de4946a8affa8c3c9a6',\n",
       " 'bd84cdeef10e4e66a501c168e98ae078',\n",
       " '7f9ad172182a45ffa96aeb6ad3d22dad',\n",
       " '3d609803523a48de944634658d5d6fad',\n",
       " '5469d8243c13414dacf81c3119de9fad',\n",
       " '040c87db98ce44acb78ed00280f2011d',\n",
       " '50e768bf50ca48e9b2a89299dbf04b94',\n",
       " '5bed947387d543628889983b830f6924',\n",
       " 'f8e04190eb424517b8cd5c7b22da0b70',\n",
       " 'bd323c7092e64fee8e8ae3f697ca2698',\n",
       " '98b578a18384401aabb647016d0a46de',\n",
       " '322043f43d764c80bb6a80ba4ec3fe10',\n",
       " 'd90406d86c534106975e846d0b090799',\n",
       " '0a44981f141e471690fd7eef6d6e38a6',\n",
       " 'c06b0b56f6ca4e1ea33a8ba607a11958',\n",
       " 'ed5bff43b9634e7daf9dee8f3b734e56',\n",
       " '51385946f660434b8c153a5641f70150',\n",
       " '95eb56f5f7fc495296a9743cabfd8afa',\n",
       " '852c4a388433464f9d60f4a0646d4d0a',\n",
       " 'fab38793e9b84128b82a202dead3fb5d',\n",
       " '320e2d8d780446acad4cb7cff8c2bc3c',\n",
       " '6ac4bc6b06db451b9ec73afcba055f0e',\n",
       " 'b2862985521a42e291fda9976d13728c',\n",
       " '4fc9edefafb64b18885a128b8ea8088b',\n",
       " '46e958d1a1b946e2a5535e1a577b7c79',\n",
       " '76c73ed790f742b6b74a6c13f66c4d93',\n",
       " 'f757a530d5c24ef68cd4739bfe8fa9c1',\n",
       " 'aec363ea80e843a3880b11f46372fe3f',\n",
       " 'cc79ea70cabb41b886b590c3371ab587',\n",
       " '04eab5ea6477491cbcd358d239ec7f95',\n",
       " '7427ce0c045f4e5eaff25363ec8117fa',\n",
       " '902b967533bf491da01dec61fbf5cace',\n",
       " '8c0efcb05b7d4d88b7270ab9edafc81a',\n",
       " 'c63b5cf6220d4478af3935370db2136f',\n",
       " '196a910dff1e4b65a9da3b049f836cd6',\n",
       " '83665f985ba448899e9e2ddc1b0b0300',\n",
       " 'bb280c129be246c88e6a65ecf2d087a5',\n",
       " 'd136bdf8c3e140938aca3752a1d6c2b7',\n",
       " 'a60fdd67291b41549a790dc7488a06a5',\n",
       " '40cfe0a5c36d449c98bbd85f402f46d7',\n",
       " '074aa6adee604bd8ada6208b41c5115b',\n",
       " '6f7c1cef4da7447386cd4c2551cd966d',\n",
       " '58dab8d45d1e4890a09583cb548adb26',\n",
       " '4afa53999e8a4e0eba51a7727e651250',\n",
       " '2149290c35674f32ad34dc771bbc5e24',\n",
       " '92e1b490bc7149b48ed7a9cf3e04e515',\n",
       " 'dcc9822f2acd4638a34489f3c42acd55',\n",
       " 'a4f5f98f2d684610970b8d75e6f47793',\n",
       " '6c2f3d50bb434b60bf3e1f59850ac6a0',\n",
       " '8af5191ac91d453a9e2039883807d9a5',\n",
       " '0eb86044606d42fe8bf0e7a1b4b792de',\n",
       " '53d37e6379154100b45f2108189aaf21',\n",
       " 'a796a6603c10465eb423273a4ba783b9',\n",
       " '68078b1704ce4514ba37d3a9c2ac436f',\n",
       " 'aec917a4ae3e4fd7a2d6200ea5e5697d',\n",
       " '6904c4055ab24f7ca14cac2630b5fe0f',\n",
       " '83743cc0016f4a94b3f14effec5a38d6',\n",
       " '84a7fc130f014783ab100a3431d9f523',\n",
       " '2b1afdd9999e417199493afb1e8327ec',\n",
       " '863d621731ff41198e27bad7c1c7c17f',\n",
       " '8c910aa6d31f43dd9cb6e07fe00bf69f',\n",
       " '61933299f57744c8b54517e43aff892a',\n",
       " '1b712a44129f441ea90db50cc9f4e6d5',\n",
       " '5cecb55813a0437688c56049947c8f3e',\n",
       " '2a6664eb670e4f558c2522a3bc810bc1',\n",
       " '4cf1703e1da442af80a551907b523ad9',\n",
       " 'b22b257c8f83451ab93e2c8bd68700e3',\n",
       " '2c5e0a5c0fb246089ac8f938c070ea46',\n",
       " '26751ebd973a431fa0f19bb5839e69bd',\n",
       " '3897617e0d01438d983143abea2d12bb',\n",
       " '176575431c4a4d5d876278b06d7b884e',\n",
       " '7893508209cd41c584f6d370b3947a12',\n",
       " '75d0daab79d344b596c2a6f9bd21ce1f',\n",
       " 'f261f09a9e4e42bb853c73e8604df657',\n",
       " 'e5b84d1081664bc88293f58faa42283e',\n",
       " '5c15ca18308d43d391d680f59831414b',\n",
       " '4fc96a653b18424ebc73903965c1d076',\n",
       " '9bc1539ec70243c78a3e6ff01ff70c58',\n",
       " 'a3671484003d434e97b78f3da1981166',\n",
       " '89f2e4020afe4d0984e97226cc199607',\n",
       " 'e87c9ed64e4b46458dc1ddf6d988752b',\n",
       " 'a707aa60ac14451ea758d931fcbf14bb',\n",
       " '9cfbd093278542ddb1717c1f54638b2f',\n",
       " 'da703185c90b43fab1bdab365e934a8e',\n",
       " '6e6ad582e213466687d72a007290b746',\n",
       " '23d8236a23f648c697e74dc1058f5c3d',\n",
       " '638953a3c0ec44da8614c4f8a43ca668',\n",
       " '35c285b5941c425c912cfdc878ab2766',\n",
       " '7a942ad21ff4493d9449631942298a7a',\n",
       " 'd869b2089ba6419fa6c58794efee9dd3',\n",
       " '6c5abb46ea37414cb67d073cfbd70026',\n",
       " '49d603937dd2461d9e44e73c09023b5c',\n",
       " '95786088fdfa4cb680f44fb70de60f5a',\n",
       " 'aa766d39746a4fb3b5311e689b566ddb',\n",
       " '64203db65bc34a248b131a1debdd40b7',\n",
       " '43af2bc7f59d43c484d97cb47bc73544',\n",
       " 'a13d243ac7e54ed9a6a52f4e431b32d2',\n",
       " '3566bc04ffc94b669e942003ee7896fd',\n",
       " '4a909524e01147219577e0222de15cc6',\n",
       " '62053373e17e44958a364117fe2749f3',\n",
       " '6787257e1638424999a89329a7fb6040',\n",
       " '5a0b19c902a94955b3fcaf1ceefaf4e5',\n",
       " 'e14c71358d4e4e7ab8cc690a1c6eb06d',\n",
       " '2d6ca6e7c0754b00bc645dbc9e925c15',\n",
       " '456cd3e337b744f0b2f45d288c137497',\n",
       " '37e896cca52840efa3f62181d27d00c7',\n",
       " '3a947b311a6c45daa784ed541fba229a',\n",
       " '4cf2e774246446629a5e88c334afaf42',\n",
       " '87bf9837ed644c828672e0c8442a231b',\n",
       " '79cb185b7ac540dda5e8a5819b91a982',\n",
       " 'e5657aafa09c43aa9b510adab4f3681a',\n",
       " 'e5aa83c3a9134b56b6860a69e600c7dd',\n",
       " 'a80429ee9ab24c0a95c6767182900e24',\n",
       " 'bb0dd628f0e54ff6865baf6a7f04c5b7',\n",
       " '6be593f675c84abbb450b30849844190',\n",
       " '92abcaeafcff47e89ed3ee08df425052',\n",
       " 'a8fdc4058fea480b880206f8186f206c',\n",
       " 'b2fdd5771a90422cbc0e47f51ca522e6',\n",
       " 'be721bf1238945e5a6c3aedb16b307c5',\n",
       " '7efbf1fb5b6542bbb313c8713cb36582',\n",
       " 'f755f70bbd88456fb726ca014ebcbfae',\n",
       " 'fc89e17282ea432092d6eb037ab81f23',\n",
       " '1516fc979ee54e9f850a441b53811885',\n",
       " '14fd0cc7606b4ff1a149a36b6d3cad91',\n",
       " '87238c19e022478fbd671bc41fe89c2d',\n",
       " '200f6fa7bed645a3aeb4bc7469110349',\n",
       " '52754d0e5fbb4eeb9d07f8b4f3a3ff67',\n",
       " '40666478bb264a7687f22ee49d013fe8',\n",
       " '02f55afa2c9f4186a1ad61aa79098e79',\n",
       " '507143082b6d4312abcdba974e89f371',\n",
       " '6994aa30f3114722a48ffc1d7e3109f5',\n",
       " '42fbb0c80b5e439b88db8a72c616946e',\n",
       " '5b501ca49f854456a11a9a3d7f3f17e0',\n",
       " '9e122bda0e22499d9446b52f875766dd',\n",
       " '950d8ba990194687bc3bcc22678da503',\n",
       " 'e1116ce055d34b37995480f4f667bf60',\n",
       " '81eb5d817fc94837b5ad1cfbfbf594ab',\n",
       " '5789fd0e10174b68a57bb50d5b122fdc',\n",
       " '8a3a77b8586546ae8a5a761b2efc1b92',\n",
       " 'a9d670794d274a1e8a6cfa8ece322ebf',\n",
       " '0c4712c437ac4dea9999236550e4dd05',\n",
       " '69d9b916bfc04efdbd9e760a86c1f347',\n",
       " '4c988425042241319a721b99ab1a4736',\n",
       " '963f9e6c13524e01b002f5fcc3a553d0',\n",
       " '02ed9366af4d4c0e9699a0a2a34a4a8e',\n",
       " 'b37707dc70fb4d35bfcb4933b9ab39a9',\n",
       " '5adcc8d092bc4c3ea254abcc430d683f',\n",
       " '155e171fe38f4e3ab4c5f5d2f7679dc7',\n",
       " '261287f7b9264c2dac1b10fd5b0a265f',\n",
       " '59418c777803403b88b5ad54da4fa447',\n",
       " '089b946cfd69449484e08ba770b0092d',\n",
       " '1da2349bf9954d42ac51b0693b87068d',\n",
       " '66aaedce48094919b3f625729b87004a',\n",
       " 'ff8987745da5416388cbe21bfbe52438',\n",
       " '42f4b83c9f1f48408a365d8a12415f24',\n",
       " '0644a50a65ba4cbda9b87f70686d7fed',\n",
       " 'bb1a54b16d314662b2850f98466b9fdb',\n",
       " '9d1d0113dd304ef0b5f8af1a6982af47',\n",
       " 'a3b6b1ae480245919eeb7b1f2b608918',\n",
       " 'fbb8959fec36403a8a2302db3d5063c6',\n",
       " 'c1a74af7b3004564b22827e336df0c12',\n",
       " 'dfe617f4424b4cb8940efd73fa302b33',\n",
       " 'c7e86e1f584e40baaba6d7180e524ae4',\n",
       " 'e7687cc19ecb41908b17536d0182618c',\n",
       " '8ce6d308d8b54909aed0c14b26e67bea',\n",
       " '3f7f648fcc904a3fa6f4c69d2b5a9e0e',\n",
       " '839ff5b209f646ae80755b7da637f733',\n",
       " '37ce2db6e9b6480fa79638bb3237f1eb',\n",
       " '3cd69d8493d7400383021dd800275887',\n",
       " '9cb150bf194a46d586a89ac0bb0767ed',\n",
       " 'eaf84106340d4f87a0e974623aa5ba39',\n",
       " 'c01d2b693cbf401aa1d06fa6308a5eda',\n",
       " 'e13283a7bdcc4b71bdfc40a089a4111c',\n",
       " '726c536268a74f188c5e13f83d90b1a8',\n",
       " 'e3206a3b25af471592d15a698c786b39',\n",
       " '3acc6b002f004d689879d2af82f31f03',\n",
       " 'da0824f705804d9f88fcb0e98b53857c',\n",
       " 'b104f9b96b90417687c280915195fbc8',\n",
       " '7503a33e2d224918a8299eaf3c6ca1ee',\n",
       " 'f3352e54a28a4e08809e9c1cada07817',\n",
       " 'e462447350574e78a062b7314c82e770',\n",
       " 'e7d9ab7ed6ac409b9be74c8cbf8cd048',\n",
       " '0c26d7618e1e4f4cb226266211c681de',\n",
       " 'cf9e767d8281450d9c85ae1a2d4e251c',\n",
       " '92b368eef97c40e1b49bfd206d28f97a',\n",
       " '6302e384b30c47f8a984255df902f1a1',\n",
       " '11d3ed7a94004d1b9e9781191cb9f077',\n",
       " '6c60be207cab4a72834f0dbef638ee1d',\n",
       " 'aa835dbdb24743798d2bbf3614b22e6e',\n",
       " 'fb7f8cf1d13540118411048f6dd822d3',\n",
       " '229402810ee0499992b1e6806b2fc009',\n",
       " 'aa7e84137c0d4cb8a7a1426144c18b5e',\n",
       " '593a60463a314272a448bc659fe0f16e',\n",
       " 'a00dbb90b3754e89a5dd26bbf39f38c5',\n",
       " '6f982c16370843e3b48529d4bea4c88e',\n",
       " 'c2c92f31e18b4b28845b07041b57c8f0',\n",
       " 'e478b9119c96471394a22c6a525b475d',\n",
       " '26c8b37140e043e19395f71d39c2569e',\n",
       " 'b2b8b8f8647e4139bd3b0c48531ad0c3',\n",
       " 'ab3501d70ec1489ebd61c26a6e292702',\n",
       " '3e2c7abe40044f5fa770b01f2b5ec74d',\n",
       " 'd0292792df2f4f8b95f5025a5ec4dcb0',\n",
       " 'bc6405a3f77041988250678b82506f9c',\n",
       " '49a777b1d9b442e0b2b8f8c4d5291745',\n",
       " '9830400e4afa4aba97dce87c6003bad0',\n",
       " '6c663c98a6ce4241aa3f1b30a22c582b',\n",
       " '6e6b5ccbd5014797b2cf398f707f6657',\n",
       " 'd94dd89f85dc4512b4fc5be42beeb4be',\n",
       " 'eced0a18188241bf869688291b089355',\n",
       " '73c353a4c3254c1a947c155b3a045daa',\n",
       " 'b27a071fb506480d9ae19f45aceed975',\n",
       " '0ab384b433a14b35881e4ad92539288f',\n",
       " 'a1d085c46ab34bf4bf6d2707a6eeebb7',\n",
       " '90a37d69ee6840eaa8352115b672b363',\n",
       " 'e8086e5eaf5c4867a3b15d1899142964',\n",
       " 'a51c47b341814aee8a988ae3d7d974b3',\n",
       " 'dd359a3fc5904746b9392659accc0527',\n",
       " '6d5f4e8f85e54519b23dfc7b39621b8d',\n",
       " 'ac7fe540b3ac4946b60a990129ec0ed1',\n",
       " '6ecd06d3de8346d7832d8762ea6cd73b',\n",
       " '537ff623687e40809b291ce43df0bfc1',\n",
       " 'fdedbf7b9c4e487c99f438efa8de63d6',\n",
       " '5ad7ded461d5436dbc960ae01ead6ebd',\n",
       " '1c5ec80664484804a1266e7cf23eeb5f',\n",
       " '4c846dfc46314e5483cd0008b3bbd223',\n",
       " 'a40b22dfc5b749c592d9f6b5a92d10a3',\n",
       " 'ad6761833b054d36a6e180e9439c5916',\n",
       " 'fc31fb3c5a894efa822dc615721a9586',\n",
       " '55dda28084fe43ffa3fcaf0cf7b5d2d3',\n",
       " 'f8e4e1c4913747cf886829b49dfd36fc',\n",
       " '1d410ae417d34d1c8cde6c7c515d16f7',\n",
       " '209e4e1432d940daaa837be285b5d6f2',\n",
       " 'ccfa1158c5484da6ad36215e58daa63d',\n",
       " 'fd75fe8263c646b0bfdfbe642ae72c9b',\n",
       " '918067a4cbe1405981b4facc482b90a0',\n",
       " '38ffcd4af70d403c986b482e70d16389',\n",
       " '8ef2077e98ca46d48aa8df6fea775599',\n",
       " 'e07e5d214ab54a5e93c0918c7635e7dd',\n",
       " '39e29b83d48d47e08977c766d2ec65af',\n",
       " 'b48a1a3805014a119cf223e5ccbd5773',\n",
       " 'e6da5c49b5ee45a1affcbc84bda370f0',\n",
       " 'becc4e32b01942afb804a9d3e67483ad',\n",
       " '090bed44c71543d7a4f27c9a1354dfe5',\n",
       " '40b385310867478ca6c8d1cfc1e8dd3e',\n",
       " 'b0060061b01648408fdc06e540f2515c',\n",
       " '12ae01d5ca7e4fcb9b68b7c3d0e201d4',\n",
       " '1c83f6351edf436abc1af7cd64c1187a',\n",
       " 'e6fe2308b0ea4e11a6feca0a0c26ff80',\n",
       " '231c0f2a47ac4f86bcc5b489b3c6fc1f',\n",
       " '39d3363e806e40c8bec5d551f2bda1e2',\n",
       " '76e19ef69106432fbd316505a81ed5ab',\n",
       " '44227cc32bd64abfb6bd812aed59da10',\n",
       " '028b78c53ba3423aa5fe6529a2780efb',\n",
       " '120d6d28e972459eab2dacb4726ecca6',\n",
       " 'a12fa1b3800a4094be4254d8b2f9545a',\n",
       " '3df93394e8bd4f7da1ba67aeccfc9cca',\n",
       " '8883e5f92c2a45438fcb1563f5e1f45e',\n",
       " 'c08f9d4a5af44f69ae0c978fe60ee376',\n",
       " '8719bc851d254654ac154e42f22f0f13',\n",
       " '82b8e0059a5549e2b3661a68c32c17c1',\n",
       " '8d97670945d542acabe4500c2d2110d2',\n",
       " 'f8cb184d8a3845a799e2f389d29e1658',\n",
       " '3451732ab97347f389f614e8bb954b1d',\n",
       " 'ae293d55afc84ae8858bce20b36cdd87',\n",
       " '63080341467b4b7bb2c03238971b97cf',\n",
       " '698e221783a84b519c65c66c84a2b288',\n",
       " '0a2fa16def8c419da7294964a8276dca',\n",
       " 'aae868b4b03b4ce0b13aa4264e287b80',\n",
       " 'e1248685bdcb4682be95a957d4835e1c',\n",
       " 'ad8edbb2660445cda10ceb8761d48d11',\n",
       " '982cd10a82e94870a83b80832ac608df',\n",
       " '308441041fdb486c92f395ee8a21fc36',\n",
       " '47c9c54be4144bd18dac16593aa96e3e',\n",
       " '585edc21e22147869a2f156da9c20e52',\n",
       " '889c354dcfb94678afca80f71a44f962',\n",
       " 'f5038ed7e8804fb3b7f10271b0cac0e8',\n",
       " 'fb00a316bc574554b7916ceb6d6fbf15',\n",
       " 'ccb9dfe9b64a4f4a9add646a98625b11',\n",
       " '31e5afaab43e411eb5dba72dca8b9896',\n",
       " 'd367d7616bd34f8583238a2c7b6f6b7e',\n",
       " '696607694e564f0ab429c6ad84d2523c',\n",
       " '099070617da34bf8946a5f58244ca02f',\n",
       " '05fe807c3e0b4a70bf331406de46b203',\n",
       " 'd4c2f6247a1546c9919214a2254db507',\n",
       " '3d54d0ba7a474cd1aacf3bc481c4dcd7',\n",
       " 'a1d1bc3423c149fb9e4e49bd372aa43e',\n",
       " '5f2de81e822d4f258463a5cf473a5986',\n",
       " '0c3ab08ee98e4317b63bd147351164b7',\n",
       " '0ce31f16f0fd438a92986700b892b682',\n",
       " '09e2488f24fb41a0807597d8cbbf4b80',\n",
       " '0f2ad13845bb47d6874abeed7d0a50ee',\n",
       " 'a64e122547624e41b6b860cb590ab42c',\n",
       " '2e56798f261649e2af0057f7fab65892',\n",
       " 'faac35e53aab486b9a33a7d1d8732cd7',\n",
       " 'a13844cd7f5f42d7aee90b3a284a9bb4',\n",
       " '5299b8c9fca3413ca17488a4bd235803',\n",
       " '43f6629e687448c3b3a50cdc8c52cb0e',\n",
       " '9106bc5f97e8445db3f794a1a5dfeb12',\n",
       " 'c69d9d6f6683476fb88598a1fc71dbe1',\n",
       " '2dd3fc53f4a04157b7d95b58abdc6a87',\n",
       " '697a62d452854a4a91a40f0ca4ad138c',\n",
       " '74878b0a5de24b2bb014c8fe10719969',\n",
       " 'd3e356ca0c03479ca96b99e51d72e5ec',\n",
       " 'cc37adc03100447e85f9fe81096dd688',\n",
       " '0abc8b2664fa460bb258c05b44b813ff',\n",
       " '0f80b2c8bd4348c0b5c5bed7cedf6866',\n",
       " 'f25fbb4cbad34d9ab1b57e54066f3075',\n",
       " 'b99d42bfdd46414bb4ba846b88971f6d',\n",
       " 'c6d449e5d14f447483ff69b6aef01680',\n",
       " 'be2bcde31cb44e27af53e183644aa6ff',\n",
       " '396f7038f95448ebbbc4b26d1d3b3ab9',\n",
       " '7938c0ad5c0c4a698796e6f933d363f5',\n",
       " '0c6a970c4f1c41999a11f4563fd42a02',\n",
       " 'b9b921295f8245d88fd125d7c515e34b',\n",
       " '33a005e837944cd88c178fe7fbbe5948',\n",
       " '833481f012334190bce97dff3c2495b1',\n",
       " '8e72a99c68a54cf4bc3fc4ee062d854d',\n",
       " '11017579bb064c4b9fa7682e49879201',\n",
       " 'f62383c296d144c7b71d39586566a20f',\n",
       " '16fce3ab50b742cdaf51842081e894e6',\n",
       " '81bada681fc24e9fad115b4fb5a8b178',\n",
       " '476b6e8d47ee4889aba22126dd536555',\n",
       " 'cdc4d74b53274bacb093022f6d656db5',\n",
       " '525854dd97974dccb356b3b65f4470e7',\n",
       " '7a623973bb644b5884d41d7b82c55845',\n",
       " '8f8e8bfefc5847afa9d20278bc27b637',\n",
       " 'e07e91cbe8e84662ae22d2541d0f02c3',\n",
       " '78ba49e7cf1c42aca7e41faa38939819',\n",
       " '0c25e767b9c1443e8183e8e0ff5e7da1',\n",
       " '1251e7d96efa4229aadbf22735f188d3',\n",
       " '8d5cb4729ffd4e258429c199b6847e80',\n",
       " '1e53050604ff4f61b028c12f914e72ba',\n",
       " '68404b93884a49a7a8150730895ca3fc',\n",
       " '07d4f9a48a4245dca34337013fd0eff0',\n",
       " '99fd1394da474cccaffff09d49dc75f6',\n",
       " 'e06d1164ec594d148e92e8d979bf6a8e',\n",
       " '362938bb7b8e4c5a8214499506f3883d',\n",
       " 'bde44e0dde664b96916f7ec542b70f94',\n",
       " '981ea2840d864d7684208403f7fa355a',\n",
       " 'c23c100d015442f786d1f32c5be13acd',\n",
       " '7baeb3c4313f4af3a0883886837d20d0',\n",
       " 'c6a73f1e0da747db8b7d2afc07697795',\n",
       " '3613132bcf104c878ec6b66df7af2273',\n",
       " 'f9c6d974c94e40f1b593ba28b46bf085',\n",
       " '59486028acb946639151e6826b6a524d',\n",
       " '9b6038df92884dd1b96c276e4509c097',\n",
       " '214000e6a7d849ee9ef9115e0da69921',\n",
       " '96216e63914d4a868965e65007d1eaf9',\n",
       " '99ba90b9563c46959e68fb1c28300561',\n",
       " 'd59a8db48fac449ab60b2ffcf9cf5396',\n",
       " '4955a832f74f4070a6b610506eb4873e',\n",
       " 'b2856797643f4d9d8fe3f1caa82ffb7a',\n",
       " '4bdcd2e32d664e3484f4f22bd6e0c0a9',\n",
       " 'c27e04d6b2b84f11882798dbbb5e14d6',\n",
       " 'a85e04bffdb442d9ace8a36f668eb577',\n",
       " '0845cb5d44dc4773bb4e0695e490f7b1',\n",
       " 'bee67bc1bf574581862252fbf677319e',\n",
       " 'fd41c1d4c82942ebb3f21a2be9118587',\n",
       " '1df11da6d1af40129022f17a77bc0c16',\n",
       " 'f970f5623d814af4a0e57a420e5499e1',\n",
       " '12301d749e1d42518d6070340705d294',\n",
       " '501263db1d1947779f233f11590c48da',\n",
       " 'a8067acf43554e26ae5bb7a076b597fa',\n",
       " 'bd4f5b01eb0e432784b7067eb73dc7b4',\n",
       " 'b83527d14a794aa5a9b9e7ed43f809b8',\n",
       " 'eb51a8ff89bd451ea0ed05c8d5b07c99',\n",
       " '067ddaeb2c5f4ef9800342cb664e1047',\n",
       " '07e78a18af934588ba83b541bfe4af18',\n",
       " '32459aafe7ba475180c7fa474951498b',\n",
       " '62d10e0b591447be940df7b9da2ce736',\n",
       " '9c7f04bfbcf84c9d857e15231e47f566',\n",
       " 'c74dc2ce72904c1c9423a4542691773f',\n",
       " '52e29c526bed4a8f83549dd044baa04f',\n",
       " '8c0f20ee78054936bfccb83598bf5220',\n",
       " '2fc37a91f3ea47ee8da9f60e78ac77c7',\n",
       " '46eeffaa9c674a5092683e2b24f3ae12',\n",
       " '6c56ca739c3e45978d314faa9640bbca',\n",
       " '53cce36252c741d790cf3d185f361098',\n",
       " '431cb27aed3641518de18264fcdc6619',\n",
       " '9ff4363b235f4b7482d1bd2eb9d3f66f',\n",
       " 'dda02e068fec439c868aa786f64a9a21',\n",
       " '2640ecd09cbf4a87887c367c2a801dd6',\n",
       " '1c93971fc598463daa08d58c38175e9e',\n",
       " '17b7453100c04ea795a58ba79453422f',\n",
       " 'cd17c77f9e2248a3b43aa6ab8a6869f0',\n",
       " '9d8de2cfd62641abb60976710a590072',\n",
       " '7133a0fa6200420d8bb612df166a53df',\n",
       " '8933c2beee83444f98ef155b3983869e',\n",
       " 'c0ed546e6e474a6dbe6d59f129fa7c43',\n",
       " 'f1c3f2c123504eb782f4316f4f59e412',\n",
       " '0e2ab4b200c94b2da943b0d3da2e7ffe',\n",
       " '1bbb887171134217b25338bedead0fab',\n",
       " '23d2e805818943f68641ec65f06d341f',\n",
       " 'c11123865bd2495fbb0a66e86b78f603',\n",
       " 'adbf1ce8cf494740a695bf2a40035ca5',\n",
       " 'c14faa2ffcd04157a8ffeb58341cef5c',\n",
       " '67b31d032e83484f9361f27d5091fe50',\n",
       " '2c86adbadc2846a5b089056c85170823',\n",
       " '7143b5ecb20a4f70b2c5c88e6ed16543',\n",
       " 'd1a13a1fa2db48ecbe851be58d35befc',\n",
       " '3153fd8037944f0ba5eb746c042702fe',\n",
       " 'a177a62ec394483da1423b7806f96526',\n",
       " '1b8369e74aa04dcb8af5ca15cdcae429',\n",
       " '130b3d351cc34dd9a86326676fe080f4',\n",
       " '3709a839ec7b4fe09c601e0333130547',\n",
       " '9947cda70b8f4d3da1ebb3de91238371',\n",
       " 'c2f04d206291413a8baa02b78a01c8ba',\n",
       " 'bc8626dbae1c4624a92897d9eb38574d',\n",
       " '46f629cdc1d64aaa8314b78a502f4bec',\n",
       " 'ae67998c8ade4a049a097b9364cffda5',\n",
       " 'f5f089a65f9f404f88730ca0a7917411',\n",
       " '569253e5a95f4666bcf267562f4ee62e',\n",
       " 'd42fa6a0f0614e3ea37e86ff1bd96efe',\n",
       " '509514836d00459aa922cb86714e82ef',\n",
       " '31c1003919124da3b25c314bb8994293',\n",
       " '2cab033d24cd4d009b5d066630171bf4',\n",
       " '00b185c977514b47b442b1b72f6ef4ef',\n",
       " 'cf8e552e11b44636b664b3c190e36541',\n",
       " '0baa6b2845bc454fb7393b21794d7c78',\n",
       " 'af4a4d0024bd48a481cca48c7e51e77b',\n",
       " '620d131a5b1d490fb113778f464fffc5',\n",
       " 'e4f7e02468074ec6ab03907aaebbf02b',\n",
       " '33ffd45a7d74443698c306d7c133faf1',\n",
       " 'b3a3d2a4a7d648e0b4b61c948b76ef94',\n",
       " '7cb3d019c60346348104e7aad8f7aa96',\n",
       " '8eb6a92bbfc94c77918fa903a971c035',\n",
       " '5d361429efbc49b7bc97fe4fc3a8ea18',\n",
       " '4a435e449d744ce6913a6ba7a54d79da',\n",
       " 'a692923233054431b8232ac4da5a3eb4',\n",
       " 'bb7b412f55a64da080546bc3bdbf37f6',\n",
       " '34ee67fc7bb84d03b8a0b0a1fe2c983d',\n",
       " '7aba2a1aac5c44fa8bf8fc291f220371',\n",
       " '9cc16663a13d490fa7229ed5d5854059',\n",
       " 'b119bfa89cf84fca9b2d607f090dd486',\n",
       " '82a9bd8695e74d8fb80bdaabf12952f0',\n",
       " 'e99502214f9b4f6ba6be267bace72d46',\n",
       " '54b47118d9b34e419f52eafd211ff5da',\n",
       " 'e13a5ff9f8c14bdd8f074a89c2f7ba88']"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qdrant.add_documents(docs_chunks)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb08c112",
   "metadata": {},
   "source": [
    "#### **Option 2**: Load an entire folder of PDFs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1755f217",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing...\n",
      "D7-SOP-AD-002_Proctor_Designation.pdf\n",
      "Successfully accessed metadata for pdf: a9794b42-9ad4-5992-8dbe-29576740d623\n",
      "Successfully added upsert date 2025-04-22T21:05:30Z to metadata\n",
      "Processed ./pdfs_backlog/D7-SOP-AD-002_Proctor_Designation.pdf\n",
      "number of pages processed: 5\n",
      "\n",
      "✅ Uploaded files:\n",
      "D7-SOP-AD-002_Proctor_Designation.pdf\n",
      "\n",
      "😈 Failed files:\n",
      "\n",
      "💥 Rejected files:\n",
      "\n",
      "\n",
      "✅ Number of files successfully uploaded:  1\n",
      "😈 Number of files failed during processing:  0\n",
      "💥 Number of files rejected as duplicate:  0\n",
      "D7-AUX-ID-Card-Request-Procedures.pdf\n",
      "Successfully accessed metadata for pdf: 47781899-a0a9-503d-8063-f929eb6518b5\n",
      "Successfully added upsert date 2025-04-22T21:05:31Z to metadata\n",
      "Processed ./pdfs_backlog/D7-AUX-ID-Card-Request-Procedures.pdf\n",
      "number of pages processed: 1\n",
      "\n",
      "✅ Uploaded files:\n",
      "D7-SOP-AD-002_Proctor_Designation.pdf\n",
      "D7-AUX-ID-Card-Request-Procedures.pdf\n",
      "\n",
      "😈 Failed files:\n",
      "\n",
      "💥 Rejected files:\n",
      "\n",
      "\n",
      "✅ Number of files successfully uploaded:  2\n",
      "😈 Number of files failed during processing:  0\n",
      "💥 Number of files rejected as duplicate:  0\n"
     ]
    }
   ],
   "source": [
    "pdf_source_directory = pdf_source_directory\n",
    "metadata_source_path = metadata_source_path\n",
    "\n",
    "\n",
    "def bulk_file_processor(pdf_source_directory, metadata_source_path):\n",
    "    print(\"Processing...\")\n",
    "    uploaded_files = []\n",
    "    rejected_files = []\n",
    "    failed_files = []\n",
    "\n",
    "    for dirpath, dirnames, filenames in os.walk(pdf_source_directory):\n",
    "        for filename in filenames:\n",
    "            if filename.lower().endswith(\".pdf\"):\n",
    "                pdf_path = os.path.join(dirpath, filename)\n",
    "                print(f\"{filename}\")\n",
    "                try:\n",
    "                    pdf_id = lib.get_pdf_id(pdf_path)\n",
    "                    if lib.is_pdf_id_in_qdrant(client, CONFIG, pdf_id):\n",
    "                        # print(\n",
    "                        #    f\"\\033[91m💥 pdf_id {pdf_id} already in Qdrant. Delete first.\\033[0m\")\n",
    "                        rejected_files.append(filename)\n",
    "                        continue  # Skip to the next file\n",
    "                    planned_metadata = lib.get_planned_metadata_for_single_record(\n",
    "                        pdf_id, metadata_source_path)\n",
    "                    docs_pages = pdf_to_Docs_via_pypdf(\n",
    "                        pdf_path, planned_metadata)\n",
    "                    docs_chunks = chunk(docs_pages)\n",
    "                    qdrant.add_documents(docs_chunks)\n",
    "                    uploaded_files.append(filename)\n",
    "                except Exception as e:\n",
    "                    print(f\"😈 Error processing {filename}: {e}\")\n",
    "                    failed_files.append(filename)\n",
    "                print(\"\\n✅ Uploaded files:\")\n",
    "                for item in uploaded_files:\n",
    "                    print(item)\n",
    "                print(\"\\n😈 Failed files:\")\n",
    "                for item in failed_files:\n",
    "                    print(item)\n",
    "                print(\"\\n💥 Rejected files:\")\n",
    "                for item in rejected_files:\n",
    "                    print(item)\n",
    "                print(\"\\n\\n✅ Number of files successfully uploaded: \",\n",
    "                      len(uploaded_files))\n",
    "                print(\"😈 Number of files failed during processing: \",\n",
    "                      len(failed_files))\n",
    "                print(\"💥 Number of files rejected as duplicate: \",\n",
    "                      len(rejected_files))\n",
    "\n",
    "\n",
    "'''usage'''\n",
    "bulk_file_processor(pdf_source_directory, metadata_source_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ece69a4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "9eb9d64f",
   "metadata": {},
   "source": [
    "## <span style=\"color:green\"><b>CONGRATULATIONS: You're done</b></span>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbe56977",
   "metadata": {},
   "source": [
    "### Simple Utility to see record in Qdrant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ea13d1e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of points found: 709\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Record(id='f871e049-3c72-4460-9573-9cba59a95276', payload={'metadata': {'upsert_date': '2025-04-21T23:45:47Z', 'embedding': 'text-embedding-ada-002', 'expiration_date': '2021-08-17T00:00:00Z', 'scope': 'national', 'organization': 'CG-BSX', 'page_count': 711, 'issue_date': '2011-08-17T00:00:00Z', 'aux_specific': True, 'public_release': True, 'publication_number': 'COMDTINST M16790.1G', 'pdf_id': '20764d16-7066-5d44-9047-2cfa8a8fb888', 'unit': '', 'source': './pdfs_backlog/CIM_16790_1G_EO_14151_version_Feb2025.pdf', 'title': 'Auxiliary Manual, COMDTINST M16790.1G, Exec. Order No.14151', 'page': 182}, 'page_content': 'COMDTINST M16790.1G  \\n   A.4.Designation Auxiliary flotillas are designated by Arabic numerals.  The first numeral indicates the division, followed by the flotilla number.  The name of the city or town in which the flotilla is located completes the designation.  For example, Flotilla 32, St. Louis, is Division 3, Flotilla 2, located at St. Louis, Missouri.  Different flotillas in the same area must, for record purposes, have different names.  New flotillas should use the name of the community, body of water, or other name identified with the locale.  When either the number of divisions or the number of flotillas exceeds nine, use a hyphen between the flotilla and division number.  For example, 11-4 or 6-10. A.5.Administration The purpose of a flotilla is to recruit, train and nurture Auxiliarists, conduct Auxiliary programs, and carry out the business of the flotilla.  Flotilla business includes, but is not limited to, the following: a. Material Supply b. Recordkeeping c. Finance d. Information Services e. Fellowship f. Administration g. Managing Recruiting/Retention h. Training The Auxiliary Flotilla Procedures Manual, COMDTINST M16791.5 (series), details guidance for flotilla administration. A.6.  Authority to Establish or Disestablish Flotillas The authority to establish or disestablish a flotilla is vested in the Director.  When established, each Auxiliary unit receives a formal Coast Guard charter signed by the Director authorizing formation and the effective date.  Directors shall keep their respective district chains of command advised of any flotilla establishment or disestablishment actions. A.7.Disestablishment Disestablishment must be considered if a flotilla falls below the required minimum acceptable membership level of ten Auxiliarists or the flotilla members’ activity or inactivity are not deemed to be in the Coast Guard or Auxiliary’s best interests.  Flotillas may be recommended for disestablishment for a variety of reasons, such as: a. Failure to meet financial obligations to division, district, or national levels. b. Continued under-strength membership (the Director may waive the required minimum acceptable membership level of ten Auxiliarists, if requested by the FC and favorably endorsed by the DCDR and DCO, for a period of no more than two consecutive years). 4-4'}, vector=None, shard_key=None, order_value=None)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from qdrant_client.http import models\n",
    "\n",
    "UUID = \"0764d16-7066-5d44-9047-2cfa8a8fb888\"\n",
    "\n",
    "records = client.scroll(\n",
    "    collection_name=CONFIG[\"qdrant_collection_name\"],\n",
    "    with_payload=True,  # change to True to see the payload\n",
    "    with_vectors=False,  # change to True to see the vectors\n",
    "    limit=1000000,\n",
    "\n",
    "    scroll_filter=models.Filter(\n",
    "        must=[\n",
    "            models.FieldCondition(key=\"metadata.pdf_id\",\n",
    "                                  match=models.MatchText(text=UUID),),\n",
    "            # models.HasIdCondition(has_id=[UUID]),\n",
    "        ]\n",
    "    ),\n",
    ")\n",
    "\n",
    "print(f\"Number of points found: {len(records[0])}\")\n",
    "records[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "946df71e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of points in ASK_vectorstore on <qdrant_client.local.qdrant_local.QdrantLocal object at 0x335b0a850>: 11406\n"
     ]
    }
   ],
   "source": [
    "print(\n",
    "    f\"Number of points in {CONFIG['qdrant_collection_name']} on {client._client}: {client.get_collection(CONFIG['qdrant_collection_name']).points_count}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b3069d8",
   "metadata": {},
   "source": [
    "### <span style=\"color:red\"><b>Delete</b></span> a PDFs records in Qdrant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "480a8102",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "UpdateResult(operation_id=23236, status=<UpdateStatus.COMPLETED: 'completed'>)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from qdrant_client.http import models\n",
    "\n",
    "client.delete(\n",
    "    collection_name=CONFIG[\"qdrant_collection_name\"],\n",
    "    points_selector=models.Filter(\n",
    "        must=[\n",
    "            models.FieldCondition(\n",
    "                key=\"metadata.pdf_id\",\n",
    "                match=models.MatchText(\n",
    "                    text=\"a9794b42-9ad4-5992-8dbe-29576740d623\"),  # BE CAREFUL CHECK THIS IS WHAT YOUR\n",
    "            ),\n",
    "        ]\n",
    "    ),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d697b13",
   "metadata": {},
   "outputs": [],
   "source": [
    "client.count(\n",
    "    collection_name=CONFIG[\"qdrant_collection_name\"],\n",
    "    count_filter=models.Filter(\n",
    "        must_not=[\n",
    "            models.HasIdCondition(has_id=[1]),\n",
    "        ]\n",
    "    ),\n",
    "    exact=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73ca13cc",
   "metadata": {},
   "source": [
    "### <span style=\"color:red\"><b>Delete ALL </b></span> records Qdrant collection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b006204",
   "metadata": {},
   "outputs": [],
   "source": [
    "from qdrant_client.http import models\n",
    "\n",
    "client.delete(\n",
    "    collection_name=CONFIG[\"qdrant_collection_name\"],\n",
    "    points_selector=models.Filter()\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34517e3c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.font_manager as font_manager\n",
    "\n",
    "def list_fonts():\n",
    "    \"\"\"Lists all fonts available on the system.\"\"\"\n",
    "    fonts = font_manager.findSystemFonts(fontpaths=None, fontext='ttf')\n",
    "    print(\"Available Fonts:\")\n",
    "    for font in fonts:\n",
    "        print(font)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    list_fonts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80cd0145",
   "metadata": {},
   "source": [
    "### Close Qdrant client"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4bc2d2c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "deleting qdrant\n",
      "closing client\n"
     ]
    }
   ],
   "source": [
    "lib.close_qdrant(client)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "141836b9",
   "metadata": {},
   "source": [
    "### **REFERENCE**: Example record"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49e78a77",
   "metadata": {},
   "source": [
    "```python\n",
    "\n",
    "Record(\n",
    "    id='01999d49fe0044478a1bffbb078938e8', \n",
    "    payload={\n",
    "        'page_content': 'I Want a VSC\\n•Revised “I Want a VSC” form is online with a new look.\\n•Major changes are:\\n•The originator no longer sees the selected VEs’ emails, only \\nselected VEs see the emails.\\n•Originator gets an email indicating they’ll be contacted.\\n•Its’ important VEs “Reply All” they’ve made contact or aren’t \\navailable.\\n•If the originator does not receive a response -they wil be instructed \\nto initiate another request.\\n“I Want a VSC” can be found at:https://wow.uscgaux.info/i_want_a_vsc/index.php\\n3\\n٠The new “I Want A VSC” program is on-line.\\n•Major changes are:\\n•Originator no longer see VEs’ emails.\\n•Originator receives an email indicating they’ll be contacted.\\n•It’s important VEs “Reply All” they’ve made contact with originator or that \\nthey’re not available.\\n•If the originator hears nothing they’re instructed to initiate another request.\\n•The new form is on line and can be found on the V-Directorate web page or with the \\nQR code or web site.', \n",
    "        'metadata': {'source': './test_pdfs_copies_delete_after_use/VE_workshop_Dec_4_22_2023.pdf', 'page': 2, 'title': 'Auxiliary Vessel Examiner VE Workshop 2023', 'pdf_id': 'a0d00ff2-7ad5-5ea7-baa0-0d738380cd3e', 'publication_number': nan, 'organization': nan, 'scope': '1_national', 'issue_date': '2024-02-16T00:00:00Z', 'upsert_date': nan, 'expiration_date': '2034-02-16T00:00:00Z', 'aux_specific': True, 'public_release': True, 'embedding': 'text-embedding-ada-002', 'page_count': 31}\n",
    "        }, \n",
    "    vector=None, \n",
    "    shard_key=None, \n",
    "    order_value=None\n",
    "),\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c3cc48d",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv-311",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
